// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package admin

import (
	context "context"
	billing "github.com/deniskelin/tada-proto/tada/api/billing"
	customer "github.com/deniskelin/tada-proto/tada/api/customer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkplaceClient is the client API for Workplace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkplaceClient interface {
	AddWorkplacesOnPersonalAccount(ctx context.Context, in *billing.AddWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.AddWorkplacesOnPersonalAccountResponse, error)
	ActivateWorkplacesOnPersonalAccount(ctx context.Context, in *billing.ActivateWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.ActivateWorkplacesOnPersonalAccountResponse, error)
	DeleteWorkplacesFromPersonalAccount(ctx context.Context, in *billing.DeleteWorkplacesFromPersonalAccountRequest, opts ...grpc.CallOption) (*billing.DeleteWorkplacesFromPersonalAccountResponse, error)
	AddUserInWorkplace(ctx context.Context, in *billing.AddUserInWorkplaceRequest, opts ...grpc.CallOption) (*billing.AddUserInWorkplaceResponse, error)
	DeleteUserFromWorkplace(ctx context.Context, in *DeleteUserFromWorkplaceRequest, opts ...grpc.CallOption) (*billing.DeleteUserFromWorkplaceResponse, error)
	GetWorkplacesByPersonalAccount(ctx context.Context, in *billing.GetWorkplacesByPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetWorkplacesByPersonalAccountResponse, error)
	GetWorkplacesWithInfoByPersonalAccount(ctx context.Context, in *billing.GetWorkplacesByPersonalAccountRequest, opts ...grpc.CallOption) (*customer.UsersInfo, error)
	GetCountOfUnpaidWorkplacesByPersonalAccount(ctx context.Context, in *billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse, error)
	GetWorkplacesWithInfoExcludingTeamByPersonalAccount(ctx context.Context, in *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest, opts ...grpc.CallOption) (*customer.UsersInfo, error)
	AddUserInWorkplaceByJid(ctx context.Context, in *AddUserInWorkplaceByJidRequest, opts ...grpc.CallOption) (*AddUserInWorkplaceByJidResponse, error)
}

type workplaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkplaceClient(cc grpc.ClientConnInterface) WorkplaceClient {
	return &workplaceClient{cc}
}

func (c *workplaceClient) AddWorkplacesOnPersonalAccount(ctx context.Context, in *billing.AddWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.AddWorkplacesOnPersonalAccountResponse, error) {
	out := new(billing.AddWorkplacesOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/AddWorkplacesOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) ActivateWorkplacesOnPersonalAccount(ctx context.Context, in *billing.ActivateWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.ActivateWorkplacesOnPersonalAccountResponse, error) {
	out := new(billing.ActivateWorkplacesOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/ActivateWorkplacesOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) DeleteWorkplacesFromPersonalAccount(ctx context.Context, in *billing.DeleteWorkplacesFromPersonalAccountRequest, opts ...grpc.CallOption) (*billing.DeleteWorkplacesFromPersonalAccountResponse, error) {
	out := new(billing.DeleteWorkplacesFromPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/DeleteWorkplacesFromPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) AddUserInWorkplace(ctx context.Context, in *billing.AddUserInWorkplaceRequest, opts ...grpc.CallOption) (*billing.AddUserInWorkplaceResponse, error) {
	out := new(billing.AddUserInWorkplaceResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/AddUserInWorkplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) DeleteUserFromWorkplace(ctx context.Context, in *DeleteUserFromWorkplaceRequest, opts ...grpc.CallOption) (*billing.DeleteUserFromWorkplaceResponse, error) {
	out := new(billing.DeleteUserFromWorkplaceResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/DeleteUserFromWorkplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) GetWorkplacesByPersonalAccount(ctx context.Context, in *billing.GetWorkplacesByPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetWorkplacesByPersonalAccountResponse, error) {
	out := new(billing.GetWorkplacesByPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/GetWorkplacesByPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) GetWorkplacesWithInfoByPersonalAccount(ctx context.Context, in *billing.GetWorkplacesByPersonalAccountRequest, opts ...grpc.CallOption) (*customer.UsersInfo, error) {
	out := new(customer.UsersInfo)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/GetWorkplacesWithInfoByPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) GetCountOfUnpaidWorkplacesByPersonalAccount(ctx context.Context, in *billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse, error) {
	out := new(billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/GetCountOfUnpaidWorkplacesByPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) GetWorkplacesWithInfoExcludingTeamByPersonalAccount(ctx context.Context, in *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest, opts ...grpc.CallOption) (*customer.UsersInfo, error) {
	out := new(customer.UsersInfo)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/GetWorkplacesWithInfoExcludingTeamByPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceClient) AddUserInWorkplaceByJid(ctx context.Context, in *AddUserInWorkplaceByJidRequest, opts ...grpc.CallOption) (*AddUserInWorkplaceByJidResponse, error) {
	out := new(AddUserInWorkplaceByJidResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.Workplace/AddUserInWorkplaceByJid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkplaceServer is the server API for Workplace service.
// All implementations must embed UnimplementedWorkplaceServer
// for forward compatibility
type WorkplaceServer interface {
	AddWorkplacesOnPersonalAccount(context.Context, *billing.AddWorkplacesOnPersonalAccountRequest) (*billing.AddWorkplacesOnPersonalAccountResponse, error)
	ActivateWorkplacesOnPersonalAccount(context.Context, *billing.ActivateWorkplacesOnPersonalAccountRequest) (*billing.ActivateWorkplacesOnPersonalAccountResponse, error)
	DeleteWorkplacesFromPersonalAccount(context.Context, *billing.DeleteWorkplacesFromPersonalAccountRequest) (*billing.DeleteWorkplacesFromPersonalAccountResponse, error)
	AddUserInWorkplace(context.Context, *billing.AddUserInWorkplaceRequest) (*billing.AddUserInWorkplaceResponse, error)
	DeleteUserFromWorkplace(context.Context, *DeleteUserFromWorkplaceRequest) (*billing.DeleteUserFromWorkplaceResponse, error)
	GetWorkplacesByPersonalAccount(context.Context, *billing.GetWorkplacesByPersonalAccountRequest) (*billing.GetWorkplacesByPersonalAccountResponse, error)
	GetWorkplacesWithInfoByPersonalAccount(context.Context, *billing.GetWorkplacesByPersonalAccountRequest) (*customer.UsersInfo, error)
	GetCountOfUnpaidWorkplacesByPersonalAccount(context.Context, *billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest) (*billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse, error)
	GetWorkplacesWithInfoExcludingTeamByPersonalAccount(context.Context, *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) (*customer.UsersInfo, error)
	AddUserInWorkplaceByJid(context.Context, *AddUserInWorkplaceByJidRequest) (*AddUserInWorkplaceByJidResponse, error)
	mustEmbedUnimplementedWorkplaceServer()
}

// UnimplementedWorkplaceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkplaceServer struct {
}

func (UnimplementedWorkplaceServer) AddWorkplacesOnPersonalAccount(context.Context, *billing.AddWorkplacesOnPersonalAccountRequest) (*billing.AddWorkplacesOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkplacesOnPersonalAccount not implemented")
}
func (UnimplementedWorkplaceServer) ActivateWorkplacesOnPersonalAccount(context.Context, *billing.ActivateWorkplacesOnPersonalAccountRequest) (*billing.ActivateWorkplacesOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateWorkplacesOnPersonalAccount not implemented")
}
func (UnimplementedWorkplaceServer) DeleteWorkplacesFromPersonalAccount(context.Context, *billing.DeleteWorkplacesFromPersonalAccountRequest) (*billing.DeleteWorkplacesFromPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkplacesFromPersonalAccount not implemented")
}
func (UnimplementedWorkplaceServer) AddUserInWorkplace(context.Context, *billing.AddUserInWorkplaceRequest) (*billing.AddUserInWorkplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserInWorkplace not implemented")
}
func (UnimplementedWorkplaceServer) DeleteUserFromWorkplace(context.Context, *DeleteUserFromWorkplaceRequest) (*billing.DeleteUserFromWorkplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFromWorkplace not implemented")
}
func (UnimplementedWorkplaceServer) GetWorkplacesByPersonalAccount(context.Context, *billing.GetWorkplacesByPersonalAccountRequest) (*billing.GetWorkplacesByPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkplacesByPersonalAccount not implemented")
}
func (UnimplementedWorkplaceServer) GetWorkplacesWithInfoByPersonalAccount(context.Context, *billing.GetWorkplacesByPersonalAccountRequest) (*customer.UsersInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkplacesWithInfoByPersonalAccount not implemented")
}
func (UnimplementedWorkplaceServer) GetCountOfUnpaidWorkplacesByPersonalAccount(context.Context, *billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest) (*billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountOfUnpaidWorkplacesByPersonalAccount not implemented")
}
func (UnimplementedWorkplaceServer) GetWorkplacesWithInfoExcludingTeamByPersonalAccount(context.Context, *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) (*customer.UsersInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkplacesWithInfoExcludingTeamByPersonalAccount not implemented")
}
func (UnimplementedWorkplaceServer) AddUserInWorkplaceByJid(context.Context, *AddUserInWorkplaceByJidRequest) (*AddUserInWorkplaceByJidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserInWorkplaceByJid not implemented")
}
func (UnimplementedWorkplaceServer) mustEmbedUnimplementedWorkplaceServer() {}

// UnsafeWorkplaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkplaceServer will
// result in compilation errors.
type UnsafeWorkplaceServer interface {
	mustEmbedUnimplementedWorkplaceServer()
}

func RegisterWorkplaceServer(s grpc.ServiceRegistrar, srv WorkplaceServer) {
	s.RegisterService(&Workplace_ServiceDesc, srv)
}

func _Workplace_AddWorkplacesOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.AddWorkplacesOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).AddWorkplacesOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/AddWorkplacesOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).AddWorkplacesOnPersonalAccount(ctx, req.(*billing.AddWorkplacesOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_ActivateWorkplacesOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.ActivateWorkplacesOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).ActivateWorkplacesOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/ActivateWorkplacesOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).ActivateWorkplacesOnPersonalAccount(ctx, req.(*billing.ActivateWorkplacesOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_DeleteWorkplacesFromPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.DeleteWorkplacesFromPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).DeleteWorkplacesFromPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/DeleteWorkplacesFromPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).DeleteWorkplacesFromPersonalAccount(ctx, req.(*billing.DeleteWorkplacesFromPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_AddUserInWorkplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.AddUserInWorkplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).AddUserInWorkplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/AddUserInWorkplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).AddUserInWorkplace(ctx, req.(*billing.AddUserInWorkplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_DeleteUserFromWorkplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserFromWorkplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).DeleteUserFromWorkplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/DeleteUserFromWorkplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).DeleteUserFromWorkplace(ctx, req.(*DeleteUserFromWorkplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_GetWorkplacesByPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetWorkplacesByPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).GetWorkplacesByPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/GetWorkplacesByPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).GetWorkplacesByPersonalAccount(ctx, req.(*billing.GetWorkplacesByPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_GetWorkplacesWithInfoByPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetWorkplacesByPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).GetWorkplacesWithInfoByPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/GetWorkplacesWithInfoByPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).GetWorkplacesWithInfoByPersonalAccount(ctx, req.(*billing.GetWorkplacesByPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_GetCountOfUnpaidWorkplacesByPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).GetCountOfUnpaidWorkplacesByPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/GetCountOfUnpaidWorkplacesByPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).GetCountOfUnpaidWorkplacesByPersonalAccount(ctx, req.(*billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_GetWorkplacesWithInfoExcludingTeamByPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).GetWorkplacesWithInfoExcludingTeamByPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/GetWorkplacesWithInfoExcludingTeamByPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).GetWorkplacesWithInfoExcludingTeamByPersonalAccount(ctx, req.(*GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workplace_AddUserInWorkplaceByJid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInWorkplaceByJidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServer).AddUserInWorkplaceByJid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.Workplace/AddUserInWorkplaceByJid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServer).AddUserInWorkplaceByJid(ctx, req.(*AddUserInWorkplaceByJidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Workplace_ServiceDesc is the grpc.ServiceDesc for Workplace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workplace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.gateway.admin.Workplace",
	HandlerType: (*WorkplaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWorkplacesOnPersonalAccount",
			Handler:    _Workplace_AddWorkplacesOnPersonalAccount_Handler,
		},
		{
			MethodName: "ActivateWorkplacesOnPersonalAccount",
			Handler:    _Workplace_ActivateWorkplacesOnPersonalAccount_Handler,
		},
		{
			MethodName: "DeleteWorkplacesFromPersonalAccount",
			Handler:    _Workplace_DeleteWorkplacesFromPersonalAccount_Handler,
		},
		{
			MethodName: "AddUserInWorkplace",
			Handler:    _Workplace_AddUserInWorkplace_Handler,
		},
		{
			MethodName: "DeleteUserFromWorkplace",
			Handler:    _Workplace_DeleteUserFromWorkplace_Handler,
		},
		{
			MethodName: "GetWorkplacesByPersonalAccount",
			Handler:    _Workplace_GetWorkplacesByPersonalAccount_Handler,
		},
		{
			MethodName: "GetWorkplacesWithInfoByPersonalAccount",
			Handler:    _Workplace_GetWorkplacesWithInfoByPersonalAccount_Handler,
		},
		{
			MethodName: "GetCountOfUnpaidWorkplacesByPersonalAccount",
			Handler:    _Workplace_GetCountOfUnpaidWorkplacesByPersonalAccount_Handler,
		},
		{
			MethodName: "GetWorkplacesWithInfoExcludingTeamByPersonalAccount",
			Handler:    _Workplace_GetWorkplacesWithInfoExcludingTeamByPersonalAccount_Handler,
		},
		{
			MethodName: "AddUserInWorkplaceByJid",
			Handler:    _Workplace_AddUserInWorkplaceByJid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/gateway/admin/workplace_service.proto",
}
