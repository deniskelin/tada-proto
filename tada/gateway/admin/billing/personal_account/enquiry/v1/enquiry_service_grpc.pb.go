// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/gateway/admin/billing/personal_account/enquiry/v1/enquiry_service.proto

package enquiry

import (
	context "context"
	v1 "github.com/deniskelin/tada-proto/tada/billing/api/personal_account/enquiry/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnquiryServiceClient is the client API for EnquiryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnquiryServiceClient interface {
	Create(ctx context.Context, in *v1.CreateRequest, opts ...grpc.CallOption) (*v1.CreateResponse, error)
	Update(ctx context.Context, in *v1.UpdateRequest, opts ...grpc.CallOption) (*v1.UpdateResponse, error)
	Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v1.GetListResponse, error)
	GetList(ctx context.Context, in *v1.GetListRequest, opts ...grpc.CallOption) (*v1.GetListResponse, error)
	GetCountsList(ctx context.Context, in *v1.GetListRequest, opts ...grpc.CallOption) (*v1.GetCountsListResponse, error)
	Delete(ctx context.Context, in *v1.DeleteRequest, opts ...grpc.CallOption) (*v1.DeleteResponse, error)
	ChangeStatus(ctx context.Context, in *v1.ChangeStatusRequest, opts ...grpc.CallOption) (*v1.ChangeStatusResponse, error)
	SetLifecycleDates(ctx context.Context, in *v1.SetLifecycleDatesRequest, opts ...grpc.CallOption) (*v1.SetLifecycleDatesResponse, error)
}

type enquiryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnquiryServiceClient(cc grpc.ClientConnInterface) EnquiryServiceClient {
	return &enquiryServiceClient{cc}
}

func (c *enquiryServiceClient) Create(ctx context.Context, in *v1.CreateRequest, opts ...grpc.CallOption) (*v1.CreateResponse, error) {
	out := new(v1.CreateResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enquiryServiceClient) Update(ctx context.Context, in *v1.UpdateRequest, opts ...grpc.CallOption) (*v1.UpdateResponse, error) {
	out := new(v1.UpdateResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enquiryServiceClient) Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v1.GetListResponse, error) {
	out := new(v1.GetListResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enquiryServiceClient) GetList(ctx context.Context, in *v1.GetListRequest, opts ...grpc.CallOption) (*v1.GetListResponse, error) {
	out := new(v1.GetListResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enquiryServiceClient) GetCountsList(ctx context.Context, in *v1.GetListRequest, opts ...grpc.CallOption) (*v1.GetCountsListResponse, error) {
	out := new(v1.GetCountsListResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/GetCountsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enquiryServiceClient) Delete(ctx context.Context, in *v1.DeleteRequest, opts ...grpc.CallOption) (*v1.DeleteResponse, error) {
	out := new(v1.DeleteResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enquiryServiceClient) ChangeStatus(ctx context.Context, in *v1.ChangeStatusRequest, opts ...grpc.CallOption) (*v1.ChangeStatusResponse, error) {
	out := new(v1.ChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enquiryServiceClient) SetLifecycleDates(ctx context.Context, in *v1.SetLifecycleDatesRequest, opts ...grpc.CallOption) (*v1.SetLifecycleDatesResponse, error) {
	out := new(v1.SetLifecycleDatesResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/SetLifecycleDates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnquiryServiceServer is the server API for EnquiryService service.
// All implementations must embed UnimplementedEnquiryServiceServer
// for forward compatibility
type EnquiryServiceServer interface {
	Create(context.Context, *v1.CreateRequest) (*v1.CreateResponse, error)
	Update(context.Context, *v1.UpdateRequest) (*v1.UpdateResponse, error)
	Get(context.Context, *v1.GetRequest) (*v1.GetListResponse, error)
	GetList(context.Context, *v1.GetListRequest) (*v1.GetListResponse, error)
	GetCountsList(context.Context, *v1.GetListRequest) (*v1.GetCountsListResponse, error)
	Delete(context.Context, *v1.DeleteRequest) (*v1.DeleteResponse, error)
	ChangeStatus(context.Context, *v1.ChangeStatusRequest) (*v1.ChangeStatusResponse, error)
	SetLifecycleDates(context.Context, *v1.SetLifecycleDatesRequest) (*v1.SetLifecycleDatesResponse, error)
	mustEmbedUnimplementedEnquiryServiceServer()
}

// UnimplementedEnquiryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnquiryServiceServer struct {
}

func (UnimplementedEnquiryServiceServer) Create(context.Context, *v1.CreateRequest) (*v1.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEnquiryServiceServer) Update(context.Context, *v1.UpdateRequest) (*v1.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEnquiryServiceServer) Get(context.Context, *v1.GetRequest) (*v1.GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEnquiryServiceServer) GetList(context.Context, *v1.GetListRequest) (*v1.GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedEnquiryServiceServer) GetCountsList(context.Context, *v1.GetListRequest) (*v1.GetCountsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountsList not implemented")
}
func (UnimplementedEnquiryServiceServer) Delete(context.Context, *v1.DeleteRequest) (*v1.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnquiryServiceServer) ChangeStatus(context.Context, *v1.ChangeStatusRequest) (*v1.ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedEnquiryServiceServer) SetLifecycleDates(context.Context, *v1.SetLifecycleDatesRequest) (*v1.SetLifecycleDatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLifecycleDates not implemented")
}
func (UnimplementedEnquiryServiceServer) mustEmbedUnimplementedEnquiryServiceServer() {}

// UnsafeEnquiryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnquiryServiceServer will
// result in compilation errors.
type UnsafeEnquiryServiceServer interface {
	mustEmbedUnimplementedEnquiryServiceServer()
}

func RegisterEnquiryServiceServer(s grpc.ServiceRegistrar, srv EnquiryServiceServer) {
	s.RegisterService(&EnquiryService_ServiceDesc, srv)
}

func _EnquiryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).Create(ctx, req.(*v1.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnquiryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).Update(ctx, req.(*v1.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnquiryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).Get(ctx, req.(*v1.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnquiryService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).GetList(ctx, req.(*v1.GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnquiryService_GetCountsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).GetCountsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/GetCountsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).GetCountsList(ctx, req.(*v1.GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnquiryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).Delete(ctx, req.(*v1.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnquiryService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).ChangeStatus(ctx, req.(*v1.ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnquiryService_SetLifecycleDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SetLifecycleDatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnquiryServiceServer).SetLifecycleDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService/SetLifecycleDates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnquiryServiceServer).SetLifecycleDates(ctx, req.(*v1.SetLifecycleDatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnquiryService_ServiceDesc is the grpc.ServiceDesc for EnquiryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnquiryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.gateway.admin.billing.personal_account.enquiry.v1.EnquiryService",
	HandlerType: (*EnquiryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EnquiryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EnquiryService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EnquiryService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _EnquiryService_GetList_Handler,
		},
		{
			MethodName: "GetCountsList",
			Handler:    _EnquiryService_GetCountsList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EnquiryService_Delete_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _EnquiryService_ChangeStatus_Handler,
		},
		{
			MethodName: "SetLifecycleDates",
			Handler:    _EnquiryService_SetLifecycleDates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/gateway/admin/billing/personal_account/enquiry/v1/enquiry_service.proto",
}
