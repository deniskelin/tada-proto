// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/gateway/admin/billing/personal_account/workplace/v1/workplace_service.proto

package workplace

import (
	context "context"
	v1 "github.com/deniskelin/tada-proto/tada/billing/api/personal_account/workplace/v1"
	v11 "github.com/deniskelin/tada-proto/tada/user/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkplaceServiceClient is the client API for WorkplaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkplaceServiceClient interface {
	Add(ctx context.Context, in *v1.AddRequest, opts ...grpc.CallOption) (*v1.AddResponse, error)
	Activate(ctx context.Context, in *v1.ActivateRequest, opts ...grpc.CallOption) (*v1.ActivateResponse, error)
	Delete(ctx context.Context, in *v1.DeleteRequest, opts ...grpc.CallOption) (*v1.DeleteResponse, error)
	AddUser(ctx context.Context, in *v1.AddUserRequest, opts ...grpc.CallOption) (*v1.AddUserResponse, error)
	AddUserByContact(ctx context.Context, in *AddUserByContactRequest, opts ...grpc.CallOption) (*AddUserByContactResponse, error)
	DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, opts ...grpc.CallOption) (*v1.DeleteUserResponse, error)
	Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v1.GetResponse, error)
	GetEnriched(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v11.GetResponse, error)
}

type workplaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkplaceServiceClient(cc grpc.ClientConnInterface) WorkplaceServiceClient {
	return &workplaceServiceClient{cc}
}

func (c *workplaceServiceClient) Add(ctx context.Context, in *v1.AddRequest, opts ...grpc.CallOption) (*v1.AddResponse, error) {
	out := new(v1.AddResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceServiceClient) Activate(ctx context.Context, in *v1.ActivateRequest, opts ...grpc.CallOption) (*v1.ActivateResponse, error) {
	out := new(v1.ActivateResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceServiceClient) Delete(ctx context.Context, in *v1.DeleteRequest, opts ...grpc.CallOption) (*v1.DeleteResponse, error) {
	out := new(v1.DeleteResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceServiceClient) AddUser(ctx context.Context, in *v1.AddUserRequest, opts ...grpc.CallOption) (*v1.AddUserResponse, error) {
	out := new(v1.AddUserResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceServiceClient) AddUserByContact(ctx context.Context, in *AddUserByContactRequest, opts ...grpc.CallOption) (*AddUserByContactResponse, error) {
	out := new(AddUserByContactResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/AddUserByContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceServiceClient) DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, opts ...grpc.CallOption) (*v1.DeleteUserResponse, error) {
	out := new(v1.DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceServiceClient) Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v1.GetResponse, error) {
	out := new(v1.GetResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workplaceServiceClient) GetEnriched(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v11.GetResponse, error) {
	out := new(v11.GetResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/GetEnriched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkplaceServiceServer is the server API for WorkplaceService service.
// All implementations must embed UnimplementedWorkplaceServiceServer
// for forward compatibility
type WorkplaceServiceServer interface {
	Add(context.Context, *v1.AddRequest) (*v1.AddResponse, error)
	Activate(context.Context, *v1.ActivateRequest) (*v1.ActivateResponse, error)
	Delete(context.Context, *v1.DeleteRequest) (*v1.DeleteResponse, error)
	AddUser(context.Context, *v1.AddUserRequest) (*v1.AddUserResponse, error)
	AddUserByContact(context.Context, *AddUserByContactRequest) (*AddUserByContactResponse, error)
	DeleteUser(context.Context, *v1.DeleteUserRequest) (*v1.DeleteUserResponse, error)
	Get(context.Context, *v1.GetRequest) (*v1.GetResponse, error)
	GetEnriched(context.Context, *v1.GetRequest) (*v11.GetResponse, error)
	mustEmbedUnimplementedWorkplaceServiceServer()
}

// UnimplementedWorkplaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkplaceServiceServer struct {
}

func (UnimplementedWorkplaceServiceServer) Add(context.Context, *v1.AddRequest) (*v1.AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedWorkplaceServiceServer) Activate(context.Context, *v1.ActivateRequest) (*v1.ActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedWorkplaceServiceServer) Delete(context.Context, *v1.DeleteRequest) (*v1.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkplaceServiceServer) AddUser(context.Context, *v1.AddUserRequest) (*v1.AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedWorkplaceServiceServer) AddUserByContact(context.Context, *AddUserByContactRequest) (*AddUserByContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserByContact not implemented")
}
func (UnimplementedWorkplaceServiceServer) DeleteUser(context.Context, *v1.DeleteUserRequest) (*v1.DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedWorkplaceServiceServer) Get(context.Context, *v1.GetRequest) (*v1.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkplaceServiceServer) GetEnriched(context.Context, *v1.GetRequest) (*v11.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnriched not implemented")
}
func (UnimplementedWorkplaceServiceServer) mustEmbedUnimplementedWorkplaceServiceServer() {}

// UnsafeWorkplaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkplaceServiceServer will
// result in compilation errors.
type UnsafeWorkplaceServiceServer interface {
	mustEmbedUnimplementedWorkplaceServiceServer()
}

func RegisterWorkplaceServiceServer(s grpc.ServiceRegistrar, srv WorkplaceServiceServer) {
	s.RegisterService(&WorkplaceService_ServiceDesc, srv)
}

func _WorkplaceService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).Add(ctx, req.(*v1.AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkplaceService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).Activate(ctx, req.(*v1.ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkplaceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).Delete(ctx, req.(*v1.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkplaceService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).AddUser(ctx, req.(*v1.AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkplaceService_AddUserByContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserByContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).AddUserByContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/AddUserByContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).AddUserByContact(ctx, req.(*AddUserByContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkplaceService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).DeleteUser(ctx, req.(*v1.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkplaceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).Get(ctx, req.(*v1.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkplaceService_GetEnriched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkplaceServiceServer).GetEnriched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService/GetEnriched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkplaceServiceServer).GetEnriched(ctx, req.(*v1.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkplaceService_ServiceDesc is the grpc.ServiceDesc for WorkplaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkplaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.gateway.admin.billing.personal_account.workplace.v1.WorkplaceService",
	HandlerType: (*WorkplaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _WorkplaceService_Add_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _WorkplaceService_Activate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WorkplaceService_Delete_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _WorkplaceService_AddUser_Handler,
		},
		{
			MethodName: "AddUserByContact",
			Handler:    _WorkplaceService_AddUserByContact_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _WorkplaceService_DeleteUser_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkplaceService_Get_Handler,
		},
		{
			MethodName: "GetEnriched",
			Handler:    _WorkplaceService_GetEnriched_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/gateway/admin/billing/personal_account/workplace/v1/workplace_service.proto",
}
