// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/gateway/admin/personal_account_service.proto

package admin

import (
	context "context"
	billing "github.com/deniskelin/tada-proto/tada/api/billing"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonalAccountClient is the client API for PersonalAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalAccountClient interface {
	GetPersonalAccountByID(ctx context.Context, in *billing.GetPersonalAccountByIDRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountByIDResponse, error)
	GetPersonalAccountsList(ctx context.Context, in *billing.GetPersonalAccountsListRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountsListResponse, error)
	GetPersonalAccountIDByOwnerUUID(ctx context.Context, in *billing.GetPersonalAccountIDByOwnerUUIDRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountIDByOwnerUUIDResponse, error)
	GetPersonalAccountIDByTeamUUID(ctx context.Context, in *billing.GetPersonalAccountIDByTeamUUIDRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountIDByTeamUUIDResponse, error)
	GetUsersByPersonalAccount(ctx context.Context, in *billing.GetUsersByPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetUsersByPersonalAccountResponse, error)
	GetCostOfWorkplacesOnPersonalAccount(ctx context.Context, in *billing.GetCostOfWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetCostOfWorkplacesOnPersonalAccountResponse, error)
	GetDiskSpaceQuotaOnPersonalAccount(ctx context.Context, in *billing.GetDiskSpaceQuotaOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetDiskSpaceQuotaOnPersonalAccountResponse, error)
	CreatePersonalAccount(ctx context.Context, in *billing.CreatePersonalAccountRequest, opts ...grpc.CallOption) (*billing.CreatePersonalAccountResponse, error)
	UpdatePersonalAccount(ctx context.Context, in *billing.UpdatePersonalAccountRequest, opts ...grpc.CallOption) (*billing.UpdatePersonalAccountResponse, error)
	ChangeDateOfDebitingFundsOnPersonalAccount(ctx context.Context, in *billing.ChangeDateOfDebitingFundsOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.ChangeDateOfDebitingFundsOnPersonalAccountResponse, error)
	DeletePersonalAccount(ctx context.Context, in *billing.DeletePersonalAccountRequest, opts ...grpc.CallOption) (*billing.DeletePersonalAccountResponse, error)
	SuspendPersonalAccount(ctx context.Context, in *billing.SuspendPersonalAccountRequest, opts ...grpc.CallOption) (*billing.SuspendPersonalAccountResponse, error)
	ActivatePersonalAccount(ctx context.Context, in *billing.ActivatePersonalAccountRequest, opts ...grpc.CallOption) (*billing.ActivatePersonalAccountResponse, error)
	BlockPersonalAccount(ctx context.Context, in *billing.BlockPersonalAccountRequest, opts ...grpc.CallOption) (*billing.BlockPersonalAccountResponse, error)
	UnblockPersonalAccount(ctx context.Context, in *billing.UnblockPersonalAccountRequest, opts ...grpc.CallOption) (*billing.UnblockPersonalAccountResponse, error)
	CheckActivePersonalAccount(ctx context.Context, in *billing.CheckActivePersonalAccountRequest, opts ...grpc.CallOption) (*billing.CheckActivePersonalAccountResponse, error)
	ProcessSuccessfulPaymentInBilling(ctx context.Context, in *ProcessSuccessfulPaymentInBillingRequest, opts ...grpc.CallOption) (*ProcessSuccessfulPaymentInBillingResponse, error)
}

type personalAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalAccountClient(cc grpc.ClientConnInterface) PersonalAccountClient {
	return &personalAccountClient{cc}
}

func (c *personalAccountClient) GetPersonalAccountByID(ctx context.Context, in *billing.GetPersonalAccountByIDRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountByIDResponse, error) {
	out := new(billing.GetPersonalAccountByIDResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/GetPersonalAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetPersonalAccountsList(ctx context.Context, in *billing.GetPersonalAccountsListRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountsListResponse, error) {
	out := new(billing.GetPersonalAccountsListResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/GetPersonalAccountsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetPersonalAccountIDByOwnerUUID(ctx context.Context, in *billing.GetPersonalAccountIDByOwnerUUIDRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountIDByOwnerUUIDResponse, error) {
	out := new(billing.GetPersonalAccountIDByOwnerUUIDResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/GetPersonalAccountIDByOwnerUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetPersonalAccountIDByTeamUUID(ctx context.Context, in *billing.GetPersonalAccountIDByTeamUUIDRequest, opts ...grpc.CallOption) (*billing.GetPersonalAccountIDByTeamUUIDResponse, error) {
	out := new(billing.GetPersonalAccountIDByTeamUUIDResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/GetPersonalAccountIDByTeamUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetUsersByPersonalAccount(ctx context.Context, in *billing.GetUsersByPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetUsersByPersonalAccountResponse, error) {
	out := new(billing.GetUsersByPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/GetUsersByPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetCostOfWorkplacesOnPersonalAccount(ctx context.Context, in *billing.GetCostOfWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetCostOfWorkplacesOnPersonalAccountResponse, error) {
	out := new(billing.GetCostOfWorkplacesOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/GetCostOfWorkplacesOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetDiskSpaceQuotaOnPersonalAccount(ctx context.Context, in *billing.GetDiskSpaceQuotaOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.GetDiskSpaceQuotaOnPersonalAccountResponse, error) {
	out := new(billing.GetDiskSpaceQuotaOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/GetDiskSpaceQuotaOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) CreatePersonalAccount(ctx context.Context, in *billing.CreatePersonalAccountRequest, opts ...grpc.CallOption) (*billing.CreatePersonalAccountResponse, error) {
	out := new(billing.CreatePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/CreatePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) UpdatePersonalAccount(ctx context.Context, in *billing.UpdatePersonalAccountRequest, opts ...grpc.CallOption) (*billing.UpdatePersonalAccountResponse, error) {
	out := new(billing.UpdatePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/UpdatePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) ChangeDateOfDebitingFundsOnPersonalAccount(ctx context.Context, in *billing.ChangeDateOfDebitingFundsOnPersonalAccountRequest, opts ...grpc.CallOption) (*billing.ChangeDateOfDebitingFundsOnPersonalAccountResponse, error) {
	out := new(billing.ChangeDateOfDebitingFundsOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/ChangeDateOfDebitingFundsOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) DeletePersonalAccount(ctx context.Context, in *billing.DeletePersonalAccountRequest, opts ...grpc.CallOption) (*billing.DeletePersonalAccountResponse, error) {
	out := new(billing.DeletePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/DeletePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) SuspendPersonalAccount(ctx context.Context, in *billing.SuspendPersonalAccountRequest, opts ...grpc.CallOption) (*billing.SuspendPersonalAccountResponse, error) {
	out := new(billing.SuspendPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/SuspendPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) ActivatePersonalAccount(ctx context.Context, in *billing.ActivatePersonalAccountRequest, opts ...grpc.CallOption) (*billing.ActivatePersonalAccountResponse, error) {
	out := new(billing.ActivatePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/ActivatePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) BlockPersonalAccount(ctx context.Context, in *billing.BlockPersonalAccountRequest, opts ...grpc.CallOption) (*billing.BlockPersonalAccountResponse, error) {
	out := new(billing.BlockPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/BlockPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) UnblockPersonalAccount(ctx context.Context, in *billing.UnblockPersonalAccountRequest, opts ...grpc.CallOption) (*billing.UnblockPersonalAccountResponse, error) {
	out := new(billing.UnblockPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/UnblockPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) CheckActivePersonalAccount(ctx context.Context, in *billing.CheckActivePersonalAccountRequest, opts ...grpc.CallOption) (*billing.CheckActivePersonalAccountResponse, error) {
	out := new(billing.CheckActivePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/CheckActivePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) ProcessSuccessfulPaymentInBilling(ctx context.Context, in *ProcessSuccessfulPaymentInBillingRequest, opts ...grpc.CallOption) (*ProcessSuccessfulPaymentInBillingResponse, error) {
	out := new(ProcessSuccessfulPaymentInBillingResponse)
	err := c.cc.Invoke(ctx, "/tada.gateway.admin.PersonalAccount/ProcessSuccessfulPaymentInBilling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalAccountServer is the server API for PersonalAccount service.
// All implementations must embed UnimplementedPersonalAccountServer
// for forward compatibility
type PersonalAccountServer interface {
	GetPersonalAccountByID(context.Context, *billing.GetPersonalAccountByIDRequest) (*billing.GetPersonalAccountByIDResponse, error)
	GetPersonalAccountsList(context.Context, *billing.GetPersonalAccountsListRequest) (*billing.GetPersonalAccountsListResponse, error)
	GetPersonalAccountIDByOwnerUUID(context.Context, *billing.GetPersonalAccountIDByOwnerUUIDRequest) (*billing.GetPersonalAccountIDByOwnerUUIDResponse, error)
	GetPersonalAccountIDByTeamUUID(context.Context, *billing.GetPersonalAccountIDByTeamUUIDRequest) (*billing.GetPersonalAccountIDByTeamUUIDResponse, error)
	GetUsersByPersonalAccount(context.Context, *billing.GetUsersByPersonalAccountRequest) (*billing.GetUsersByPersonalAccountResponse, error)
	GetCostOfWorkplacesOnPersonalAccount(context.Context, *billing.GetCostOfWorkplacesOnPersonalAccountRequest) (*billing.GetCostOfWorkplacesOnPersonalAccountResponse, error)
	GetDiskSpaceQuotaOnPersonalAccount(context.Context, *billing.GetDiskSpaceQuotaOnPersonalAccountRequest) (*billing.GetDiskSpaceQuotaOnPersonalAccountResponse, error)
	CreatePersonalAccount(context.Context, *billing.CreatePersonalAccountRequest) (*billing.CreatePersonalAccountResponse, error)
	UpdatePersonalAccount(context.Context, *billing.UpdatePersonalAccountRequest) (*billing.UpdatePersonalAccountResponse, error)
	ChangeDateOfDebitingFundsOnPersonalAccount(context.Context, *billing.ChangeDateOfDebitingFundsOnPersonalAccountRequest) (*billing.ChangeDateOfDebitingFundsOnPersonalAccountResponse, error)
	DeletePersonalAccount(context.Context, *billing.DeletePersonalAccountRequest) (*billing.DeletePersonalAccountResponse, error)
	SuspendPersonalAccount(context.Context, *billing.SuspendPersonalAccountRequest) (*billing.SuspendPersonalAccountResponse, error)
	ActivatePersonalAccount(context.Context, *billing.ActivatePersonalAccountRequest) (*billing.ActivatePersonalAccountResponse, error)
	BlockPersonalAccount(context.Context, *billing.BlockPersonalAccountRequest) (*billing.BlockPersonalAccountResponse, error)
	UnblockPersonalAccount(context.Context, *billing.UnblockPersonalAccountRequest) (*billing.UnblockPersonalAccountResponse, error)
	CheckActivePersonalAccount(context.Context, *billing.CheckActivePersonalAccountRequest) (*billing.CheckActivePersonalAccountResponse, error)
	ProcessSuccessfulPaymentInBilling(context.Context, *ProcessSuccessfulPaymentInBillingRequest) (*ProcessSuccessfulPaymentInBillingResponse, error)
	mustEmbedUnimplementedPersonalAccountServer()
}

// UnimplementedPersonalAccountServer must be embedded to have forward compatible implementations.
type UnimplementedPersonalAccountServer struct {
}

func (UnimplementedPersonalAccountServer) GetPersonalAccountByID(context.Context, *billing.GetPersonalAccountByIDRequest) (*billing.GetPersonalAccountByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountByID not implemented")
}
func (UnimplementedPersonalAccountServer) GetPersonalAccountsList(context.Context, *billing.GetPersonalAccountsListRequest) (*billing.GetPersonalAccountsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountsList not implemented")
}
func (UnimplementedPersonalAccountServer) GetPersonalAccountIDByOwnerUUID(context.Context, *billing.GetPersonalAccountIDByOwnerUUIDRequest) (*billing.GetPersonalAccountIDByOwnerUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountIDByOwnerUUID not implemented")
}
func (UnimplementedPersonalAccountServer) GetPersonalAccountIDByTeamUUID(context.Context, *billing.GetPersonalAccountIDByTeamUUIDRequest) (*billing.GetPersonalAccountIDByTeamUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountIDByTeamUUID not implemented")
}
func (UnimplementedPersonalAccountServer) GetUsersByPersonalAccount(context.Context, *billing.GetUsersByPersonalAccountRequest) (*billing.GetUsersByPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) GetCostOfWorkplacesOnPersonalAccount(context.Context, *billing.GetCostOfWorkplacesOnPersonalAccountRequest) (*billing.GetCostOfWorkplacesOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostOfWorkplacesOnPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) GetDiskSpaceQuotaOnPersonalAccount(context.Context, *billing.GetDiskSpaceQuotaOnPersonalAccountRequest) (*billing.GetDiskSpaceQuotaOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskSpaceQuotaOnPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) CreatePersonalAccount(context.Context, *billing.CreatePersonalAccountRequest) (*billing.CreatePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) UpdatePersonalAccount(context.Context, *billing.UpdatePersonalAccountRequest) (*billing.UpdatePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) ChangeDateOfDebitingFundsOnPersonalAccount(context.Context, *billing.ChangeDateOfDebitingFundsOnPersonalAccountRequest) (*billing.ChangeDateOfDebitingFundsOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDateOfDebitingFundsOnPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) DeletePersonalAccount(context.Context, *billing.DeletePersonalAccountRequest) (*billing.DeletePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) SuspendPersonalAccount(context.Context, *billing.SuspendPersonalAccountRequest) (*billing.SuspendPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) ActivatePersonalAccount(context.Context, *billing.ActivatePersonalAccountRequest) (*billing.ActivatePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) BlockPersonalAccount(context.Context, *billing.BlockPersonalAccountRequest) (*billing.BlockPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) UnblockPersonalAccount(context.Context, *billing.UnblockPersonalAccountRequest) (*billing.UnblockPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) CheckActivePersonalAccount(context.Context, *billing.CheckActivePersonalAccountRequest) (*billing.CheckActivePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActivePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) ProcessSuccessfulPaymentInBilling(context.Context, *ProcessSuccessfulPaymentInBillingRequest) (*ProcessSuccessfulPaymentInBillingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSuccessfulPaymentInBilling not implemented")
}
func (UnimplementedPersonalAccountServer) mustEmbedUnimplementedPersonalAccountServer() {}

// UnsafePersonalAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalAccountServer will
// result in compilation errors.
type UnsafePersonalAccountServer interface {
	mustEmbedUnimplementedPersonalAccountServer()
}

func RegisterPersonalAccountServer(s grpc.ServiceRegistrar, srv PersonalAccountServer) {
	s.RegisterService(&PersonalAccount_ServiceDesc, srv)
}

func _PersonalAccount_GetPersonalAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetPersonalAccountByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/GetPersonalAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountByID(ctx, req.(*billing.GetPersonalAccountByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetPersonalAccountsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetPersonalAccountsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/GetPersonalAccountsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountsList(ctx, req.(*billing.GetPersonalAccountsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetPersonalAccountIDByOwnerUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetPersonalAccountIDByOwnerUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByOwnerUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/GetPersonalAccountIDByOwnerUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByOwnerUUID(ctx, req.(*billing.GetPersonalAccountIDByOwnerUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetPersonalAccountIDByTeamUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetPersonalAccountIDByTeamUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByTeamUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/GetPersonalAccountIDByTeamUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByTeamUUID(ctx, req.(*billing.GetPersonalAccountIDByTeamUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetUsersByPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetUsersByPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetUsersByPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/GetUsersByPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetUsersByPersonalAccount(ctx, req.(*billing.GetUsersByPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetCostOfWorkplacesOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetCostOfWorkplacesOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetCostOfWorkplacesOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/GetCostOfWorkplacesOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetCostOfWorkplacesOnPersonalAccount(ctx, req.(*billing.GetCostOfWorkplacesOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetDiskSpaceQuotaOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.GetDiskSpaceQuotaOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetDiskSpaceQuotaOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/GetDiskSpaceQuotaOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetDiskSpaceQuotaOnPersonalAccount(ctx, req.(*billing.GetDiskSpaceQuotaOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_CreatePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.CreatePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).CreatePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/CreatePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).CreatePersonalAccount(ctx, req.(*billing.CreatePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_UpdatePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.UpdatePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).UpdatePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/UpdatePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).UpdatePersonalAccount(ctx, req.(*billing.UpdatePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_ChangeDateOfDebitingFundsOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.ChangeDateOfDebitingFundsOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).ChangeDateOfDebitingFundsOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/ChangeDateOfDebitingFundsOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).ChangeDateOfDebitingFundsOnPersonalAccount(ctx, req.(*billing.ChangeDateOfDebitingFundsOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_DeletePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.DeletePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).DeletePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/DeletePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).DeletePersonalAccount(ctx, req.(*billing.DeletePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_SuspendPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.SuspendPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).SuspendPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/SuspendPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).SuspendPersonalAccount(ctx, req.(*billing.SuspendPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_ActivatePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.ActivatePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).ActivatePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/ActivatePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).ActivatePersonalAccount(ctx, req.(*billing.ActivatePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_BlockPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.BlockPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).BlockPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/BlockPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).BlockPersonalAccount(ctx, req.(*billing.BlockPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_UnblockPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.UnblockPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).UnblockPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/UnblockPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).UnblockPersonalAccount(ctx, req.(*billing.UnblockPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_CheckActivePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(billing.CheckActivePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).CheckActivePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/CheckActivePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).CheckActivePersonalAccount(ctx, req.(*billing.CheckActivePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_ProcessSuccessfulPaymentInBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSuccessfulPaymentInBillingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).ProcessSuccessfulPaymentInBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.gateway.admin.PersonalAccount/ProcessSuccessfulPaymentInBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).ProcessSuccessfulPaymentInBilling(ctx, req.(*ProcessSuccessfulPaymentInBillingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalAccount_ServiceDesc is the grpc.ServiceDesc for PersonalAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.gateway.admin.PersonalAccount",
	HandlerType: (*PersonalAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonalAccountByID",
			Handler:    _PersonalAccount_GetPersonalAccountByID_Handler,
		},
		{
			MethodName: "GetPersonalAccountsList",
			Handler:    _PersonalAccount_GetPersonalAccountsList_Handler,
		},
		{
			MethodName: "GetPersonalAccountIDByOwnerUUID",
			Handler:    _PersonalAccount_GetPersonalAccountIDByOwnerUUID_Handler,
		},
		{
			MethodName: "GetPersonalAccountIDByTeamUUID",
			Handler:    _PersonalAccount_GetPersonalAccountIDByTeamUUID_Handler,
		},
		{
			MethodName: "GetUsersByPersonalAccount",
			Handler:    _PersonalAccount_GetUsersByPersonalAccount_Handler,
		},
		{
			MethodName: "GetCostOfWorkplacesOnPersonalAccount",
			Handler:    _PersonalAccount_GetCostOfWorkplacesOnPersonalAccount_Handler,
		},
		{
			MethodName: "GetDiskSpaceQuotaOnPersonalAccount",
			Handler:    _PersonalAccount_GetDiskSpaceQuotaOnPersonalAccount_Handler,
		},
		{
			MethodName: "CreatePersonalAccount",
			Handler:    _PersonalAccount_CreatePersonalAccount_Handler,
		},
		{
			MethodName: "UpdatePersonalAccount",
			Handler:    _PersonalAccount_UpdatePersonalAccount_Handler,
		},
		{
			MethodName: "ChangeDateOfDebitingFundsOnPersonalAccount",
			Handler:    _PersonalAccount_ChangeDateOfDebitingFundsOnPersonalAccount_Handler,
		},
		{
			MethodName: "DeletePersonalAccount",
			Handler:    _PersonalAccount_DeletePersonalAccount_Handler,
		},
		{
			MethodName: "SuspendPersonalAccount",
			Handler:    _PersonalAccount_SuspendPersonalAccount_Handler,
		},
		{
			MethodName: "ActivatePersonalAccount",
			Handler:    _PersonalAccount_ActivatePersonalAccount_Handler,
		},
		{
			MethodName: "BlockPersonalAccount",
			Handler:    _PersonalAccount_BlockPersonalAccount_Handler,
		},
		{
			MethodName: "UnblockPersonalAccount",
			Handler:    _PersonalAccount_UnblockPersonalAccount_Handler,
		},
		{
			MethodName: "CheckActivePersonalAccount",
			Handler:    _PersonalAccount_CheckActivePersonalAccount_Handler,
		},
		{
			MethodName: "ProcessSuccessfulPaymentInBilling",
			Handler:    _PersonalAccount_ProcessSuccessfulPaymentInBilling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/gateway/admin/personal_account_service.proto",
}
