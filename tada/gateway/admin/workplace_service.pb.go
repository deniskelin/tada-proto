// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: tada/gateway/admin/workplace_service.proto

package admin

import (
	billing "github.com/deniskelin/tada-proto/tada/api/billing"
	customer "github.com/deniskelin/tada-proto/tada/api/customer"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetWorkplacesByPersonalAccountRequest request on get workplaces by personal account
type GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonalAccountId int64  `protobuf:"varint,1,opt,name=personal_account_id,json=personalAccountId,proto3" json:"personal_account_id,omitempty"`
	TeamUuid          string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Limit             *int32 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset            *int32 `protobuf:"varint,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) Reset() {
	*x = GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_gateway_admin_workplace_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) ProtoMessage() {}

func (x *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_gateway_admin_workplace_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest.ProtoReflect.Descriptor instead.
func (*GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) Descriptor() ([]byte, []int) {
	return file_tada_gateway_admin_workplace_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) GetPersonalAccountId() int64 {
	if x != nil {
		return x.PersonalAccountId
	}
	return 0
}

func (x *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

// AddUserInWorkplaceByJidRequest request on add user on workplace
type AddUserInWorkplaceByJidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetUserUuidByContactRequest *customer.GetUserUUIDByContactRequest `protobuf:"bytes,1,opt,name=get_user_uuid_by_contact_request,json=getUserUuidByContactRequest,proto3" json:"get_user_uuid_by_contact_request,omitempty"`
	PersonalAccountId           int64                                 `protobuf:"varint,2,opt,name=personal_account_id,json=personalAccountId,proto3" json:"personal_account_id,omitempty"`
}

func (x *AddUserInWorkplaceByJidRequest) Reset() {
	*x = AddUserInWorkplaceByJidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_gateway_admin_workplace_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserInWorkplaceByJidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserInWorkplaceByJidRequest) ProtoMessage() {}

func (x *AddUserInWorkplaceByJidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_gateway_admin_workplace_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserInWorkplaceByJidRequest.ProtoReflect.Descriptor instead.
func (*AddUserInWorkplaceByJidRequest) Descriptor() ([]byte, []int) {
	return file_tada_gateway_admin_workplace_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddUserInWorkplaceByJidRequest) GetGetUserUuidByContactRequest() *customer.GetUserUUIDByContactRequest {
	if x != nil {
		return x.GetUserUuidByContactRequest
	}
	return nil
}

func (x *AddUserInWorkplaceByJidRequest) GetPersonalAccountId() int64 {
	if x != nil {
		return x.PersonalAccountId
	}
	return 0
}

// DeleteUserFromWorkplaceRequest request on delete user from workplace on personal account
type DeleteUserFromWorkplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonalAccountId int64   `protobuf:"varint,1,opt,name=personal_account_id,json=personalAccountId,proto3" json:"personal_account_id,omitempty"`
	Token             *string `protobuf:"bytes,2,opt,name=token,proto3,oneof" json:"token,omitempty"`
	UserId            *int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserUuid          *string `protobuf:"bytes,4,opt,name=user_uuid,json=userUuid,proto3,oneof" json:"user_uuid,omitempty"`
}

func (x *DeleteUserFromWorkplaceRequest) Reset() {
	*x = DeleteUserFromWorkplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_gateway_admin_workplace_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserFromWorkplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserFromWorkplaceRequest) ProtoMessage() {}

func (x *DeleteUserFromWorkplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_gateway_admin_workplace_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserFromWorkplaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserFromWorkplaceRequest) Descriptor() ([]byte, []int) {
	return file_tada_gateway_admin_workplace_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteUserFromWorkplaceRequest) GetPersonalAccountId() int64 {
	if x != nil {
		return x.PersonalAccountId
	}
	return 0
}

func (x *DeleteUserFromWorkplaceRequest) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *DeleteUserFromWorkplaceRequest) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *DeleteUserFromWorkplaceRequest) GetUserUuid() string {
	if x != nil && x.UserUuid != nil {
		return *x.UserUuid
	}
	return ""
}

var File_tada_gateway_admin_workplace_service_proto protoreflect.FileDescriptor

var file_tada_gateway_admin_workplace_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61,
	0x64, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x1a, 0x28, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x61, 0x64, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6,
	0x01, 0x0a, 0x3a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79,
	0x4a, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x20, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xcf, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x32, 0xa9, 0x11, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0xda, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x4f, 0x6e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x1a,
	0x3a, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x41, 0x64, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xee,
	0x01, 0x0a, 0x23, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x32, 0x3f, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0xee, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x2a, 0x3f, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0xaa, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xc0, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x74, 0x61, 0x64, 0x61,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f, 0x72,
	0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x57,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x33, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0xda, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74,
	0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3a,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xce, 0x01,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22, 0x42, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8e,
	0x02, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x55, 0x6e, 0x70,
	0x61, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44,
	0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x55, 0x6e, 0x70, 0x61,
	0x69, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x66, 0x55, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x22, 0x47, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x55, 0x6e, 0x70, 0x61, 0x69,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0xff, 0x01, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x42,
	0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x22, 0x4f, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0xab, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x4a, 0x69, 0x64, 0x12, 0x32, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x4a, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x1a, 0x33, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x4a, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x42,
	0x95, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x15, 0x54, 0x61, 0x64, 0x61, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x74, 0x65, 0x61,
	0x6d, 0x2f, 0x74, 0x64, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xaa, 0x02, 0x12,
	0x54, 0x61, 0x64, 0x61, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0xca, 0x02, 0x12, 0x54, 0x61, 0x64, 0x61, 0x5c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tada_gateway_admin_workplace_service_proto_rawDescOnce sync.Once
	file_tada_gateway_admin_workplace_service_proto_rawDescData = file_tada_gateway_admin_workplace_service_proto_rawDesc
)

func file_tada_gateway_admin_workplace_service_proto_rawDescGZIP() []byte {
	file_tada_gateway_admin_workplace_service_proto_rawDescOnce.Do(func() {
		file_tada_gateway_admin_workplace_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tada_gateway_admin_workplace_service_proto_rawDescData)
	})
	return file_tada_gateway_admin_workplace_service_proto_rawDescData
}

var file_tada_gateway_admin_workplace_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tada_gateway_admin_workplace_service_proto_goTypes = []interface{}{
	(*GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest)(nil),  // 0: tada.gateway.admin.GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest
	(*AddUserInWorkplaceByJidRequest)(nil),                              // 1: tada.gateway.admin.AddUserInWorkplaceByJidRequest
	(*DeleteUserFromWorkplaceRequest)(nil),                              // 2: tada.gateway.admin.DeleteUserFromWorkplaceRequest
	(*customer.GetUserUUIDByContactRequest)(nil),                        // 3: tada.api.customer.GetUserUUIDByContactRequest
	(*billing.AddWorkplacesOnPersonalAccountRequest)(nil),               // 4: tada.api.billing.AddWorkplacesOnPersonalAccountRequest
	(*billing.ActivateWorkplacesOnPersonalAccountRequest)(nil),          // 5: tada.api.billing.ActivateWorkplacesOnPersonalAccountRequest
	(*billing.DeleteWorkplacesFromPersonalAccountRequest)(nil),          // 6: tada.api.billing.DeleteWorkplacesFromPersonalAccountRequest
	(*billing.AddUserInWorkplaceRequest)(nil),                           // 7: tada.api.billing.AddUserInWorkplaceRequest
	(*billing.GetWorkplacesByPersonalAccountRequest)(nil),               // 8: tada.api.billing.GetWorkplacesByPersonalAccountRequest
	(*billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest)(nil),  // 9: tada.api.billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest
	(*billing.AddWorkplacesOnPersonalAccountResponse)(nil),              // 10: tada.api.billing.AddWorkplacesOnPersonalAccountResponse
	(*billing.ActivateWorkplacesOnPersonalAccountResponse)(nil),         // 11: tada.api.billing.ActivateWorkplacesOnPersonalAccountResponse
	(*billing.DeleteWorkplacesFromPersonalAccountResponse)(nil),         // 12: tada.api.billing.DeleteWorkplacesFromPersonalAccountResponse
	(*billing.AddUserInWorkplaceResponse)(nil),                          // 13: tada.api.billing.AddUserInWorkplaceResponse
	(*billing.DeleteUserFromWorkplaceResponse)(nil),                     // 14: tada.api.billing.DeleteUserFromWorkplaceResponse
	(*billing.GetWorkplacesByPersonalAccountResponse)(nil),              // 15: tada.api.billing.GetWorkplacesByPersonalAccountResponse
	(*customer.UsersInfo)(nil),                                          // 16: tada.api.customer.UsersInfo
	(*billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse)(nil), // 17: tada.api.billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse
}
var file_tada_gateway_admin_workplace_service_proto_depIdxs = []int32{
	3,  // 0: tada.gateway.admin.AddUserInWorkplaceByJidRequest.get_user_uuid_by_contact_request:type_name -> tada.api.customer.GetUserUUIDByContactRequest
	4,  // 1: tada.gateway.admin.Workplace.AddWorkplacesOnPersonalAccount:input_type -> tada.api.billing.AddWorkplacesOnPersonalAccountRequest
	5,  // 2: tada.gateway.admin.Workplace.ActivateWorkplacesOnPersonalAccount:input_type -> tada.api.billing.ActivateWorkplacesOnPersonalAccountRequest
	6,  // 3: tada.gateway.admin.Workplace.DeleteWorkplacesFromPersonalAccount:input_type -> tada.api.billing.DeleteWorkplacesFromPersonalAccountRequest
	7,  // 4: tada.gateway.admin.Workplace.AddUserInWorkplace:input_type -> tada.api.billing.AddUserInWorkplaceRequest
	2,  // 5: tada.gateway.admin.Workplace.DeleteUserFromWorkplace:input_type -> tada.gateway.admin.DeleteUserFromWorkplaceRequest
	8,  // 6: tada.gateway.admin.Workplace.GetWorkplacesByPersonalAccount:input_type -> tada.api.billing.GetWorkplacesByPersonalAccountRequest
	8,  // 7: tada.gateway.admin.Workplace.GetWorkplacesWithInfoByPersonalAccount:input_type -> tada.api.billing.GetWorkplacesByPersonalAccountRequest
	9,  // 8: tada.gateway.admin.Workplace.GetCountOfUnpaidWorkplacesByPersonalAccount:input_type -> tada.api.billing.GetCountOfUnpaidWorkplacesByPersonalAccountRequest
	0,  // 9: tada.gateway.admin.Workplace.GetWorkplacesWithInfoExcludingTeamByPersonalAccount:input_type -> tada.gateway.admin.GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest
	1,  // 10: tada.gateway.admin.Workplace.AddUserInWorkplaceByJid:input_type -> tada.gateway.admin.AddUserInWorkplaceByJidRequest
	10, // 11: tada.gateway.admin.Workplace.AddWorkplacesOnPersonalAccount:output_type -> tada.api.billing.AddWorkplacesOnPersonalAccountResponse
	11, // 12: tada.gateway.admin.Workplace.ActivateWorkplacesOnPersonalAccount:output_type -> tada.api.billing.ActivateWorkplacesOnPersonalAccountResponse
	12, // 13: tada.gateway.admin.Workplace.DeleteWorkplacesFromPersonalAccount:output_type -> tada.api.billing.DeleteWorkplacesFromPersonalAccountResponse
	13, // 14: tada.gateway.admin.Workplace.AddUserInWorkplace:output_type -> tada.api.billing.AddUserInWorkplaceResponse
	14, // 15: tada.gateway.admin.Workplace.DeleteUserFromWorkplace:output_type -> tada.api.billing.DeleteUserFromWorkplaceResponse
	15, // 16: tada.gateway.admin.Workplace.GetWorkplacesByPersonalAccount:output_type -> tada.api.billing.GetWorkplacesByPersonalAccountResponse
	16, // 17: tada.gateway.admin.Workplace.GetWorkplacesWithInfoByPersonalAccount:output_type -> tada.api.customer.UsersInfo
	17, // 18: tada.gateway.admin.Workplace.GetCountOfUnpaidWorkplacesByPersonalAccount:output_type -> tada.api.billing.GetCountOfUnpaidWorkplacesByPersonalAccountResponse
	16, // 19: tada.gateway.admin.Workplace.GetWorkplacesWithInfoExcludingTeamByPersonalAccount:output_type -> tada.api.customer.UsersInfo
	16, // 20: tada.gateway.admin.Workplace.AddUserInWorkplaceByJid:output_type -> tada.api.customer.UsersInfo
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_tada_gateway_admin_workplace_service_proto_init() }
func file_tada_gateway_admin_workplace_service_proto_init() {
	if File_tada_gateway_admin_workplace_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tada_gateway_admin_workplace_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkplacesWithInfoExcludingTeamByPersonalAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_gateway_admin_workplace_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserInWorkplaceByJidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_gateway_admin_workplace_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserFromWorkplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tada_gateway_admin_workplace_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tada_gateway_admin_workplace_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tada_gateway_admin_workplace_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tada_gateway_admin_workplace_service_proto_goTypes,
		DependencyIndexes: file_tada_gateway_admin_workplace_service_proto_depIdxs,
		MessageInfos:      file_tada_gateway_admin_workplace_service_proto_msgTypes,
	}.Build()
	File_tada_gateway_admin_workplace_service_proto = out.File
	file_tada_gateway_admin_workplace_service_proto_rawDesc = nil
	file_tada_gateway_admin_workplace_service_proto_goTypes = nil
	file_tada_gateway_admin_workplace_service_proto_depIdxs = nil
}
