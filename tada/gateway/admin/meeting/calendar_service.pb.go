// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: tada/gateway/admin/meeting/calendar_service.proto

package meetingGatewayPb

import (
	meeting "github.com/deniskelin/tada-proto/tada/api/meeting"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Request of delete members from meeting
type DeleteMemberFromMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId   uint64   `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	ContactUuid []string `protobuf:"bytes,2,rep,name=contact_uuid,json=contactUuid,proto3" json:"contact_uuid,omitempty"`
}

func (x *DeleteMemberFromMeetingRequest) Reset() {
	*x = DeleteMemberFromMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_gateway_admin_meeting_calendar_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemberFromMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemberFromMeetingRequest) ProtoMessage() {}

func (x *DeleteMemberFromMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_gateway_admin_meeting_calendar_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemberFromMeetingRequest.ProtoReflect.Descriptor instead.
func (*DeleteMemberFromMeetingRequest) Descriptor() ([]byte, []int) {
	return file_tada_gateway_admin_meeting_calendar_service_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteMemberFromMeetingRequest) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *DeleteMemberFromMeetingRequest) GetContactUuid() []string {
	if x != nil {
		return x.ContactUuid
	}
	return nil
}

var File_tada_gateway_admin_meeting_calendar_service_proto protoreflect.FileDescriptor

var file_tada_gateway_admin_meeting_calendar_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x1a,
	0x27, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x32, 0xe5, 0x13, 0x0a, 0x0e,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x8c,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24,
	0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xcc, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x2e, 0x74,
	0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3a, 0x12, 0x38, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x7e, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x19, 0x2e, 0x74, 0x61,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x55, 0x49, 0x44, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74,
	0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x1a,
	0x2a, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x91,
	0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x26, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x2a, 0x2a, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2b, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22,
	0x2f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a,
	0x32, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x2a, 0x34, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2a, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a, 0x2e, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x2a, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74,
	0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x2e, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x3a, 0x01, 0x2a, 0x42, 0xc7, 0x01, 0x0a, 0x1a, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x1c, 0x54, 0x61, 0x64, 0x61, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x64, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x3b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x62, 0xaa, 0x02, 0x1a, 0x54, 0x61, 0x64, 0x61, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0xca, 0x02, 0x1a, 0x54, 0x61, 0x64, 0x61, 0x5c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tada_gateway_admin_meeting_calendar_service_proto_rawDescOnce sync.Once
	file_tada_gateway_admin_meeting_calendar_service_proto_rawDescData = file_tada_gateway_admin_meeting_calendar_service_proto_rawDesc
)

func file_tada_gateway_admin_meeting_calendar_service_proto_rawDescGZIP() []byte {
	file_tada_gateway_admin_meeting_calendar_service_proto_rawDescOnce.Do(func() {
		file_tada_gateway_admin_meeting_calendar_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tada_gateway_admin_meeting_calendar_service_proto_rawDescData)
	})
	return file_tada_gateway_admin_meeting_calendar_service_proto_rawDescData
}

var file_tada_gateway_admin_meeting_calendar_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tada_gateway_admin_meeting_calendar_service_proto_goTypes = []interface{}{
	(*DeleteMemberFromMeetingRequest)(nil),              // 0: tada.gateway.admin.meeting.DeleteMemberFromMeetingRequest
	(*meeting.GetMeetingsRequest)(nil),                  // 1: tada.api.meeting.GetMeetingsRequest
	(*meeting.GetMeetingsGroupsByIntervalRequest)(nil),  // 2: tada.api.meeting.GetMeetingsGroupsByIntervalRequest
	(*wrapperspb.UInt64Value)(nil),                      // 3: google.protobuf.UInt64Value
	(*wrapperspb.StringValue)(nil),                      // 4: google.protobuf.StringValue
	(*meeting.CreateMeetingRequest)(nil),                // 5: tada.api.meeting.CreateMeetingRequest
	(*meeting.UpdateMeetingRequest)(nil),                // 6: tada.api.meeting.UpdateMeetingRequest
	(*meeting.DeleteMeetingRequest)(nil),                // 7: tada.api.meeting.DeleteMeetingRequest
	(*meeting.GetMeetingMembersRequest)(nil),            // 8: tada.api.meeting.GetMeetingMembersRequest
	(*meeting.AddMemberInMeetingRequest)(nil),           // 9: tada.api.meeting.AddMemberInMeetingRequest
	(*meeting.UpdateMemberInMeetingRequest)(nil),        // 10: tada.api.meeting.UpdateMemberInMeetingRequest
	(*meeting.UpdateMeetingCellRequest)(nil),            // 11: tada.api.meeting.UpdateMeetingCellRequest
	(*meeting.DeleteMeetingCellRequest)(nil),            // 12: tada.api.meeting.DeleteMeetingCellRequest
	(*meeting.GenerateMeetingCellsRequest)(nil),         // 13: tada.api.meeting.GenerateMeetingCellsRequest
	(*meeting.GetMeetingsResponse)(nil),                 // 14: tada.api.meeting.GetMeetingsResponse
	(*meeting.GetMeetingsDatesResponse)(nil),            // 15: tada.api.meeting.GetMeetingsDatesResponse
	(*meeting.GetMeetingsCountsResponse)(nil),           // 16: tada.api.meeting.GetMeetingsCountsResponse
	(*meeting.GetMeetingsGroupsByIntervalResponse)(nil), // 17: tada.api.meeting.GetMeetingsGroupsByIntervalResponse
	(*meeting.Meeting)(nil),                             // 18: tada.api.meeting.Meeting
	(*meeting.SuccessResponse)(nil),                     // 19: tada.api.meeting.SuccessResponse
	(*meeting.GetMeetingMembersResponse)(nil),           // 20: tada.api.meeting.GetMeetingMembersResponse
	(*meeting.Member)(nil),                              // 21: tada.api.meeting.Member
}
var file_tada_gateway_admin_meeting_calendar_service_proto_depIdxs = []int32{
	1,  // 0: tada.gateway.admin.meeting.MeetingGateway.GetMeetings:input_type -> tada.api.meeting.GetMeetingsRequest
	1,  // 1: tada.gateway.admin.meeting.MeetingGateway.GetMeetingsDates:input_type -> tada.api.meeting.GetMeetingsRequest
	1,  // 2: tada.gateway.admin.meeting.MeetingGateway.GetMeetingsCounts:input_type -> tada.api.meeting.GetMeetingsRequest
	2,  // 3: tada.gateway.admin.meeting.MeetingGateway.GetMeetingsGroupsByInterval:input_type -> tada.api.meeting.GetMeetingsGroupsByIntervalRequest
	3,  // 4: tada.gateway.admin.meeting.MeetingGateway.GetMeetingById:input_type -> google.protobuf.UInt64Value
	4,  // 5: tada.gateway.admin.meeting.MeetingGateway.GetMeetingByGroupUUID:input_type -> google.protobuf.StringValue
	5,  // 6: tada.gateway.admin.meeting.MeetingGateway.CreateMeeting:input_type -> tada.api.meeting.CreateMeetingRequest
	6,  // 7: tada.gateway.admin.meeting.MeetingGateway.UpdateMeeting:input_type -> tada.api.meeting.UpdateMeetingRequest
	7,  // 8: tada.gateway.admin.meeting.MeetingGateway.DeleteMeeting:input_type -> tada.api.meeting.DeleteMeetingRequest
	8,  // 9: tada.gateway.admin.meeting.MeetingGateway.GetMeetingMembers:input_type -> tada.api.meeting.GetMeetingMembersRequest
	9,  // 10: tada.gateway.admin.meeting.MeetingGateway.AddMemberInMeeting:input_type -> tada.api.meeting.AddMemberInMeetingRequest
	10, // 11: tada.gateway.admin.meeting.MeetingGateway.UpdateMemberInMeeting:input_type -> tada.api.meeting.UpdateMemberInMeetingRequest
	0,  // 12: tada.gateway.admin.meeting.MeetingGateway.DeleteMemberFromMeeting:input_type -> tada.gateway.admin.meeting.DeleteMemberFromMeetingRequest
	11, // 13: tada.gateway.admin.meeting.MeetingGateway.UpdateMeetingCell:input_type -> tada.api.meeting.UpdateMeetingCellRequest
	12, // 14: tada.gateway.admin.meeting.MeetingGateway.DeleteMeetingCell:input_type -> tada.api.meeting.DeleteMeetingCellRequest
	13, // 15: tada.gateway.admin.meeting.MeetingGateway.GenerateMeetingCells:input_type -> tada.api.meeting.GenerateMeetingCellsRequest
	14, // 16: tada.gateway.admin.meeting.MeetingGateway.GetMeetings:output_type -> tada.api.meeting.GetMeetingsResponse
	15, // 17: tada.gateway.admin.meeting.MeetingGateway.GetMeetingsDates:output_type -> tada.api.meeting.GetMeetingsDatesResponse
	16, // 18: tada.gateway.admin.meeting.MeetingGateway.GetMeetingsCounts:output_type -> tada.api.meeting.GetMeetingsCountsResponse
	17, // 19: tada.gateway.admin.meeting.MeetingGateway.GetMeetingsGroupsByInterval:output_type -> tada.api.meeting.GetMeetingsGroupsByIntervalResponse
	18, // 20: tada.gateway.admin.meeting.MeetingGateway.GetMeetingById:output_type -> tada.api.meeting.Meeting
	18, // 21: tada.gateway.admin.meeting.MeetingGateway.GetMeetingByGroupUUID:output_type -> tada.api.meeting.Meeting
	18, // 22: tada.gateway.admin.meeting.MeetingGateway.CreateMeeting:output_type -> tada.api.meeting.Meeting
	18, // 23: tada.gateway.admin.meeting.MeetingGateway.UpdateMeeting:output_type -> tada.api.meeting.Meeting
	19, // 24: tada.gateway.admin.meeting.MeetingGateway.DeleteMeeting:output_type -> tada.api.meeting.SuccessResponse
	20, // 25: tada.gateway.admin.meeting.MeetingGateway.GetMeetingMembers:output_type -> tada.api.meeting.GetMeetingMembersResponse
	21, // 26: tada.gateway.admin.meeting.MeetingGateway.AddMemberInMeeting:output_type -> tada.api.meeting.Member
	21, // 27: tada.gateway.admin.meeting.MeetingGateway.UpdateMemberInMeeting:output_type -> tada.api.meeting.Member
	19, // 28: tada.gateway.admin.meeting.MeetingGateway.DeleteMemberFromMeeting:output_type -> tada.api.meeting.SuccessResponse
	18, // 29: tada.gateway.admin.meeting.MeetingGateway.UpdateMeetingCell:output_type -> tada.api.meeting.Meeting
	19, // 30: tada.gateway.admin.meeting.MeetingGateway.DeleteMeetingCell:output_type -> tada.api.meeting.SuccessResponse
	19, // 31: tada.gateway.admin.meeting.MeetingGateway.GenerateMeetingCells:output_type -> tada.api.meeting.SuccessResponse
	16, // [16:32] is the sub-list for method output_type
	0,  // [0:16] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_tada_gateway_admin_meeting_calendar_service_proto_init() }
func file_tada_gateway_admin_meeting_calendar_service_proto_init() {
	if File_tada_gateway_admin_meeting_calendar_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tada_gateway_admin_meeting_calendar_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemberFromMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tada_gateway_admin_meeting_calendar_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tada_gateway_admin_meeting_calendar_service_proto_goTypes,
		DependencyIndexes: file_tada_gateway_admin_meeting_calendar_service_proto_depIdxs,
		MessageInfos:      file_tada_gateway_admin_meeting_calendar_service_proto_msgTypes,
	}.Build()
	File_tada_gateway_admin_meeting_calendar_service_proto = out.File
	file_tada_gateway_admin_meeting_calendar_service_proto_rawDesc = nil
	file_tada_gateway_admin_meeting_calendar_service_proto_goTypes = nil
	file_tada_gateway_admin_meeting_calendar_service_proto_depIdxs = nil
}
