// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OldApiClient is the client API for OldApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OldApiClient interface {
	DeleteUserFromTeam(ctx context.Context, in *DeleteUserFromTeamRequest, opts ...grpc.CallOption) (*DeleteUserFromTeamResponse, error)
}

type oldApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOldApiClient(cc grpc.ClientConnInterface) OldApiClient {
	return &oldApiClient{cc}
}

func (c *oldApiClient) DeleteUserFromTeam(ctx context.Context, in *DeleteUserFromTeamRequest, opts ...grpc.CallOption) (*DeleteUserFromTeamResponse, error) {
	out := new(DeleteUserFromTeamResponse)
	err := c.cc.Invoke(ctx, "/tada.api.customer.OldApi/DeleteUserFromTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OldApiServer is the server API for OldApi service.
// All implementations must embed UnimplementedOldApiServer
// for forward compatibility
type OldApiServer interface {
	DeleteUserFromTeam(context.Context, *DeleteUserFromTeamRequest) (*DeleteUserFromTeamResponse, error)
	mustEmbedUnimplementedOldApiServer()
}

// UnimplementedOldApiServer must be embedded to have forward compatible implementations.
type UnimplementedOldApiServer struct {
}

func (UnimplementedOldApiServer) DeleteUserFromTeam(context.Context, *DeleteUserFromTeamRequest) (*DeleteUserFromTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFromTeam not implemented")
}
func (UnimplementedOldApiServer) mustEmbedUnimplementedOldApiServer() {}

// UnsafeOldApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OldApiServer will
// result in compilation errors.
type UnsafeOldApiServer interface {
	mustEmbedUnimplementedOldApiServer()
}

func RegisterOldApiServer(s grpc.ServiceRegistrar, srv OldApiServer) {
	s.RegisterService(&OldApi_ServiceDesc, srv)
}

func _OldApi_DeleteUserFromTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserFromTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OldApiServer).DeleteUserFromTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.customer.OldApi/DeleteUserFromTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OldApiServer).DeleteUserFromTeam(ctx, req.(*DeleteUserFromTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OldApi_ServiceDesc is the grpc.ServiceDesc for OldApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OldApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.api.customer.OldApi",
	HandlerType: (*OldApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUserFromTeam",
			Handler:    _OldApi_DeleteUserFromTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/api/customer/old_api_service.proto",
}
