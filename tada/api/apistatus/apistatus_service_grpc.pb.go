// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/api/apistatus/apistatus_service.proto

package apistatus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIStatusClient is the client API for APIStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIStatusClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type aPIStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIStatusClient(cc grpc.ClientConnInterface) APIStatusClient {
	return &aPIStatusClient{cc}
}

func (c *aPIStatusClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/tada.api.apistatus.APIStatus/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIStatusClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/tada.api.apistatus.APIStatus/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIStatusServer is the server API for APIStatus service.
// All implementations must embed UnimplementedAPIStatusServer
// for forward compatibility
type APIStatusServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	mustEmbedUnimplementedAPIStatusServer()
}

// UnimplementedAPIStatusServer must be embedded to have forward compatible implementations.
type UnimplementedAPIStatusServer struct {
}

func (UnimplementedAPIStatusServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedAPIStatusServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedAPIStatusServer) mustEmbedUnimplementedAPIStatusServer() {}

// UnsafeAPIStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIStatusServer will
// result in compilation errors.
type UnsafeAPIStatusServer interface {
	mustEmbedUnimplementedAPIStatusServer()
}

func RegisterAPIStatusServer(s grpc.ServiceRegistrar, srv APIStatusServer) {
	s.RegisterService(&APIStatus_ServiceDesc, srv)
}

func _APIStatus_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIStatusServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.apistatus.APIStatus/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIStatusServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIStatus_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIStatusServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.apistatus.APIStatus/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIStatusServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIStatus_ServiceDesc is the grpc.ServiceDesc for APIStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.api.apistatus.APIStatus",
	HandlerType: (*APIStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _APIStatus_Version_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _APIStatus_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/api/apistatus/apistatus_service.proto",
}
