// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: tada/api/apistatus/apistatus_service.proto

package apistatus

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for method GetAPIVersion to get API version
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_apistatus_apistatus_service_proto_rawDescGZIP(), []int{0}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildDate   string `protobuf:"bytes,1,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	BuildNumber string `protobuf:"bytes,2,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Hash        string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_tada_api_apistatus_apistatus_service_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

func (x *VersionResponse) GetBuildNumber() string {
	if x != nil {
		return x.BuildNumber
	}
	return ""
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// Request for method GetAPIVersion to get API version
type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_apistatus_apistatus_service_proto_rawDescGZIP(), []int{2}
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname                     string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ServerTime                   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UserAgent                    string                 `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	RuntimeNumGoroutine          int64                  `protobuf:"varint,4,opt,name=runtime_num_goroutine,json=runtimeNumGoroutine,proto3" json:"runtime_num_goroutine,omitempty"`
	RuntimeMemStatsAlloc         uint64                 `protobuf:"varint,5,opt,name=runtime_mem_stats_alloc,json=runtimeMemStatsAlloc,proto3" json:"runtime_mem_stats_alloc,omitempty"`
	RuntimeMemStatsTotalAlloc    uint64                 `protobuf:"varint,6,opt,name=runtime_mem_stats_total_alloc,json=runtimeMemStatsTotalAlloc,proto3" json:"runtime_mem_stats_total_alloc,omitempty"`
	RuntimeMemStatsSys           uint64                 `protobuf:"varint,7,opt,name=runtime_mem_stats_sys,json=runtimeMemStatsSys,proto3" json:"runtime_mem_stats_sys,omitempty"`
	RuntimeMemStatsLookups       uint64                 `protobuf:"varint,8,opt,name=runtime_mem_stats_lookups,json=runtimeMemStatsLookups,proto3" json:"runtime_mem_stats_lookups,omitempty"`
	RuntimeMemStatsMallocs       uint64                 `protobuf:"varint,9,opt,name=runtime_mem_stats_mallocs,json=runtimeMemStatsMallocs,proto3" json:"runtime_mem_stats_mallocs,omitempty"`
	RuntimeMemStatsFrees         uint64                 `protobuf:"varint,10,opt,name=runtime_mem_stats_frees,json=runtimeMemStatsFrees,proto3" json:"runtime_mem_stats_frees,omitempty"`
	RuntimeMemStatsHeapAlloc     uint64                 `protobuf:"varint,11,opt,name=runtime_mem_stats_heap_alloc,json=runtimeMemStatsHeapAlloc,proto3" json:"runtime_mem_stats_heap_alloc,omitempty"`
	RuntimeMemStatsHeapSys       uint64                 `protobuf:"varint,12,opt,name=runtime_mem_stats_heap_sys,json=runtimeMemStatsHeapSys,proto3" json:"runtime_mem_stats_heap_sys,omitempty"`
	RuntimeMemStatsHeapIdle      uint64                 `protobuf:"varint,13,opt,name=runtime_mem_stats_heap_idle,json=runtimeMemStatsHeapIdle,proto3" json:"runtime_mem_stats_heap_idle,omitempty"`
	RuntimeMemStatsHeapInUse     uint64                 `protobuf:"varint,14,opt,name=runtime_mem_stats_heap_in_use,json=runtimeMemStatsHeapInUse,proto3" json:"runtime_mem_stats_heap_in_use,omitempty"`
	RuntimeMemStatsHeapReleased  uint64                 `protobuf:"varint,15,opt,name=runtime_mem_stats_heap_released,json=runtimeMemStatsHeapReleased,proto3" json:"runtime_mem_stats_heap_released,omitempty"`
	RuntimeMemStatsHeapObjects   uint64                 `protobuf:"varint,16,opt,name=runtime_mem_stats_heap_objects,json=runtimeMemStatsHeapObjects,proto3" json:"runtime_mem_stats_heap_objects,omitempty"`
	RuntimeMemStatsStackInuse    uint64                 `protobuf:"varint,17,opt,name=runtime_mem_stats_stack_inuse,json=runtimeMemStatsStackInuse,proto3" json:"runtime_mem_stats_stack_inuse,omitempty"`
	RuntimeMemStatsStackSys      uint64                 `protobuf:"varint,18,opt,name=runtime_mem_stats_stack_sys,json=runtimeMemStatsStackSys,proto3" json:"runtime_mem_stats_stack_sys,omitempty"`
	RuntimeMemStatsMSpanInuse    uint64                 `protobuf:"varint,19,opt,name=runtime_mem_stats_m_span_inuse,json=runtimeMemStatsMSpanInuse,proto3" json:"runtime_mem_stats_m_span_inuse,omitempty"`
	RuntimeMemStatsMSpanSys      uint64                 `protobuf:"varint,20,opt,name=runtime_mem_stats_m_span_sys,json=runtimeMemStatsMSpanSys,proto3" json:"runtime_mem_stats_m_span_sys,omitempty"`
	RuntimeMemStatsMCacheInuse   uint64                 `protobuf:"varint,21,opt,name=runtime_mem_stats_m_cache_inuse,json=runtimeMemStatsMCacheInuse,proto3" json:"runtime_mem_stats_m_cache_inuse,omitempty"`
	RuntimeMemStatsMCacheSys     uint64                 `protobuf:"varint,22,opt,name=runtime_mem_stats_m_cache_sys,json=runtimeMemStatsMCacheSys,proto3" json:"runtime_mem_stats_m_cache_sys,omitempty"`
	RuntimeMemStatsBuckHashSys   uint64                 `protobuf:"varint,23,opt,name=runtime_mem_stats_buck_hash_sys,json=runtimeMemStatsBuckHashSys,proto3" json:"runtime_mem_stats_buck_hash_sys,omitempty"`
	RuntimeMemStatsGCSys         uint64                 `protobuf:"varint,24,opt,name=runtime_mem_stats_g_c_sys,json=runtimeMemStatsGCSys,proto3" json:"runtime_mem_stats_g_c_sys,omitempty"`
	RuntimeMemStatsOtherSys      uint64                 `protobuf:"varint,25,opt,name=runtime_mem_stats_other_sys,json=runtimeMemStatsOtherSys,proto3" json:"runtime_mem_stats_other_sys,omitempty"`
	RuntimeMemStatsNextGC        uint64                 `protobuf:"varint,26,opt,name=runtime_mem_stats_next_g_c,json=runtimeMemStatsNextGC,proto3" json:"runtime_mem_stats_next_g_c,omitempty"`
	RuntimeMemStatsLastGC        uint64                 `protobuf:"varint,27,opt,name=runtime_mem_stats_last_g_c,json=runtimeMemStatsLastGC,proto3" json:"runtime_mem_stats_last_g_c,omitempty"`
	RuntimeMemStatsPauseTotalNs  uint64                 `protobuf:"varint,28,opt,name=runtime_mem_stats_pause_total_ns,json=runtimeMemStatsPauseTotalNs,proto3" json:"runtime_mem_stats_pause_total_ns,omitempty"`
	RuntimeMemStatsNumGC         uint32                 `protobuf:"varint,29,opt,name=runtime_mem_stats_num_g_c,json=runtimeMemStatsNumGC,proto3" json:"runtime_mem_stats_num_g_c,omitempty"`
	RuntimeMemStatsNumForcedGC   uint32                 `protobuf:"varint,30,opt,name=runtime_mem_stats_num_forced_g_c,json=runtimeMemStatsNumForcedGC,proto3" json:"runtime_mem_stats_num_forced_g_c,omitempty"`
	RuntimeMemStatsGCCpuFraction float64                `protobuf:"fixed64,31,opt,name=runtime_mem_stats_g_c_cpu_fraction,json=runtimeMemStatsGCCpuFraction,proto3" json:"runtime_mem_stats_g_c_cpu_fraction,omitempty"`
	RuntimeMemStatsEnableGC      bool                   `protobuf:"varint,32,opt,name=runtime_mem_stats_enable_g_c,json=runtimeMemStatsEnableGC,proto3" json:"runtime_mem_stats_enable_g_c,omitempty"`
	RuntimeMemStatsDebugGC       bool                   `protobuf:"varint,33,opt,name=runtime_mem_stats_debug_g_c,json=runtimeMemStatsDebugGC,proto3" json:"runtime_mem_stats_debug_g_c,omitempty"`
	RuntimeNumCpu                int64                  `protobuf:"varint,34,opt,name=runtime_num_cpu,json=runtimeNumCpu,proto3" json:"runtime_num_cpu,omitempty"`
	RequestId                    string                 `protobuf:"bytes,35,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RemoteAddr                   string                 `protobuf:"bytes,36,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	RequestHeaders               map[string]string      `protobuf:"bytes,37,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_apistatus_apistatus_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_tada_api_apistatus_apistatus_service_proto_rawDescGZIP(), []int{3}
}

func (x *InfoResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *InfoResponse) GetServerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ServerTime
	}
	return nil
}

func (x *InfoResponse) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *InfoResponse) GetRuntimeNumGoroutine() int64 {
	if x != nil {
		return x.RuntimeNumGoroutine
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsAlloc() uint64 {
	if x != nil {
		return x.RuntimeMemStatsAlloc
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsTotalAlloc() uint64 {
	if x != nil {
		return x.RuntimeMemStatsTotalAlloc
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsLookups() uint64 {
	if x != nil {
		return x.RuntimeMemStatsLookups
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsMallocs() uint64 {
	if x != nil {
		return x.RuntimeMemStatsMallocs
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsFrees() uint64 {
	if x != nil {
		return x.RuntimeMemStatsFrees
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsHeapAlloc() uint64 {
	if x != nil {
		return x.RuntimeMemStatsHeapAlloc
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsHeapSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsHeapSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsHeapIdle() uint64 {
	if x != nil {
		return x.RuntimeMemStatsHeapIdle
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsHeapInUse() uint64 {
	if x != nil {
		return x.RuntimeMemStatsHeapInUse
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsHeapReleased() uint64 {
	if x != nil {
		return x.RuntimeMemStatsHeapReleased
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsHeapObjects() uint64 {
	if x != nil {
		return x.RuntimeMemStatsHeapObjects
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsStackInuse() uint64 {
	if x != nil {
		return x.RuntimeMemStatsStackInuse
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsStackSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsStackSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsMSpanInuse() uint64 {
	if x != nil {
		return x.RuntimeMemStatsMSpanInuse
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsMSpanSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsMSpanSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsMCacheInuse() uint64 {
	if x != nil {
		return x.RuntimeMemStatsMCacheInuse
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsMCacheSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsMCacheSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsBuckHashSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsBuckHashSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsGCSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsGCSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsOtherSys() uint64 {
	if x != nil {
		return x.RuntimeMemStatsOtherSys
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsNextGC() uint64 {
	if x != nil {
		return x.RuntimeMemStatsNextGC
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsLastGC() uint64 {
	if x != nil {
		return x.RuntimeMemStatsLastGC
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsPauseTotalNs() uint64 {
	if x != nil {
		return x.RuntimeMemStatsPauseTotalNs
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsNumGC() uint32 {
	if x != nil {
		return x.RuntimeMemStatsNumGC
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsNumForcedGC() uint32 {
	if x != nil {
		return x.RuntimeMemStatsNumForcedGC
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsGCCpuFraction() float64 {
	if x != nil {
		return x.RuntimeMemStatsGCCpuFraction
	}
	return 0
}

func (x *InfoResponse) GetRuntimeMemStatsEnableGC() bool {
	if x != nil {
		return x.RuntimeMemStatsEnableGC
	}
	return false
}

func (x *InfoResponse) GetRuntimeMemStatsDebugGC() bool {
	if x != nil {
		return x.RuntimeMemStatsDebugGC
	}
	return false
}

func (x *InfoResponse) GetRuntimeNumCpu() int64 {
	if x != nil {
		return x.RuntimeNumCpu
	}
	return 0
}

func (x *InfoResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *InfoResponse) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *InfoResponse) GetRequestHeaders() map[string]string {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

var File_tada_api_apistatus_apistatus_service_proto protoreflect.FileDescriptor

var file_tada_api_apistatus_apistatus_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x61,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xe8, 0x11, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x6f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x73, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x79, 0x73, 0x12, 0x39, 0x0a,
	0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x16, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x72, 0x65, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x68, 0x65, 0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x48, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x3a, 0x0a, 0x1a, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48,
	0x65, 0x61, 0x70, 0x53, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x65, 0x61, 0x70,
	0x49, 0x64, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x65, 0x61, 0x70,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48,
	0x65, 0x61, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x65, 0x61, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x40, 0x0a, 0x1d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x75, 0x73, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x75, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x12,
	0x41, 0x0a, 0x1e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x75, 0x73,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x6e, 0x75,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x1c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x79,
	0x73, 0x12, 0x43, 0x0a, 0x1f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69,
	0x6e, 0x75, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x6e, 0x75, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x79, 0x73, 0x12, 0x43, 0x0a, 0x1f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x79, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x75, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x53, 0x79, 0x73, 0x12, 0x37, 0x0a, 0x19,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x67, 0x5f, 0x63, 0x5f, 0x73, 0x79, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x47, 0x43, 0x53, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x73, 0x79, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x5f,
	0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x43, 0x12, 0x39,
	0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x5f, 0x63, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x43, 0x12, 0x45, 0x0a, 0x20, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x73,
	0x12, 0x37, 0x0a, 0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x5f, 0x63, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x47, 0x43, 0x12, 0x44, 0x0a, 0x20, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x67, 0x5f, 0x63, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x47, 0x43, 0x12,
	0x48, 0x0a, 0x22, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x5f, 0x63, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x43, 0x43, 0x70,
	0x75, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1c, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x5f, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x43, 0x12, 0x3b, 0x0a, 0x1b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x67, 0x5f, 0x63, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x47, 0x43, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x5d, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x41, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0x81, 0x02, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7f, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74,
	0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x50, 0x49,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x73,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x99, 0x01, 0x0a, 0x12, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x15, 0x54, 0x61, 0x64, 0x61,
	0x41, 0x50, 0x49, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x74, 0x61, 0x64, 0x61,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x64, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3b, 0x61, 0x70, 0x69, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xaa, 0x02, 0x12, 0x54, 0x61, 0x64, 0x61, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0x02, 0x12, 0x54, 0x61, 0x64,
	0x61, 0x5c, 0x41, 0x50, 0x49, 0x5c, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tada_api_apistatus_apistatus_service_proto_rawDescOnce sync.Once
	file_tada_api_apistatus_apistatus_service_proto_rawDescData = file_tada_api_apistatus_apistatus_service_proto_rawDesc
)

func file_tada_api_apistatus_apistatus_service_proto_rawDescGZIP() []byte {
	file_tada_api_apistatus_apistatus_service_proto_rawDescOnce.Do(func() {
		file_tada_api_apistatus_apistatus_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tada_api_apistatus_apistatus_service_proto_rawDescData)
	})
	return file_tada_api_apistatus_apistatus_service_proto_rawDescData
}

var file_tada_api_apistatus_apistatus_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tada_api_apistatus_apistatus_service_proto_goTypes = []interface{}{
	(*VersionRequest)(nil),        // 0: tada.api.apistatus.VersionRequest
	(*VersionResponse)(nil),       // 1: tada.api.apistatus.VersionResponse
	(*InfoRequest)(nil),           // 2: tada.api.apistatus.InfoRequest
	(*InfoResponse)(nil),          // 3: tada.api.apistatus.InfoResponse
	nil,                           // 4: tada.api.apistatus.InfoResponse.RequestHeadersEntry
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_tada_api_apistatus_apistatus_service_proto_depIdxs = []int32{
	5, // 0: tada.api.apistatus.InfoResponse.server_time:type_name -> google.protobuf.Timestamp
	4, // 1: tada.api.apistatus.InfoResponse.request_headers:type_name -> tada.api.apistatus.InfoResponse.RequestHeadersEntry
	0, // 2: tada.api.apistatus.APIStatus.Version:input_type -> tada.api.apistatus.VersionRequest
	2, // 3: tada.api.apistatus.APIStatus.Info:input_type -> tada.api.apistatus.InfoRequest
	1, // 4: tada.api.apistatus.APIStatus.Version:output_type -> tada.api.apistatus.VersionResponse
	3, // 5: tada.api.apistatus.APIStatus.Info:output_type -> tada.api.apistatus.InfoResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tada_api_apistatus_apistatus_service_proto_init() }
func file_tada_api_apistatus_apistatus_service_proto_init() {
	if File_tada_api_apistatus_apistatus_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tada_api_apistatus_apistatus_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_apistatus_apistatus_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_apistatus_apistatus_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_apistatus_apistatus_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tada_api_apistatus_apistatus_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tada_api_apistatus_apistatus_service_proto_goTypes,
		DependencyIndexes: file_tada_api_apistatus_apistatus_service_proto_depIdxs,
		MessageInfos:      file_tada_api_apistatus_apistatus_service_proto_msgTypes,
	}.Build()
	File_tada_api_apistatus_apistatus_service_proto = out.File
	file_tada_api_apistatus_apistatus_service_proto_rawDesc = nil
	file_tada_api_apistatus_apistatus_service_proto_goTypes = nil
	file_tada_api_apistatus_apistatus_service_proto_depIdxs = nil
}
