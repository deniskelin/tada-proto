// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/api/billing/tariff_service.proto

package billing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TariffClient is the client API for Tariff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TariffClient interface {
	CreateTariff(ctx context.Context, in *CreateTariffRequest, opts ...grpc.CallOption) (*CreateTariffResponse, error)
	UpdateTariff(ctx context.Context, in *UpdateTariffRequest, opts ...grpc.CallOption) (*UpdateTariffResponse, error)
	GetTariffById(ctx context.Context, in *GetTariffByIdRequest, opts ...grpc.CallOption) (*GetTariffByIdResponse, error)
	GetTariffsList(ctx context.Context, in *GetTariffsListRequest, opts ...grpc.CallOption) (*GetTariffsListResponse, error)
	GetActiveTariffsList(ctx context.Context, in *GetActiveTariffsListRequest, opts ...grpc.CallOption) (*GetActiveTariffsListResponse, error)
	CloseTariff(ctx context.Context, in *CloseTariffRequest, opts ...grpc.CallOption) (*CloseTariffResponse, error)
	SetTariffAsDefault(ctx context.Context, in *SetTariffAsDefaultRequest, opts ...grpc.CallOption) (*SetTariffAsDefaultResponse, error)
}

type tariffClient struct {
	cc grpc.ClientConnInterface
}

func NewTariffClient(cc grpc.ClientConnInterface) TariffClient {
	return &tariffClient{cc}
}

func (c *tariffClient) CreateTariff(ctx context.Context, in *CreateTariffRequest, opts ...grpc.CallOption) (*CreateTariffResponse, error) {
	out := new(CreateTariffResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.Tariff/CreateTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffClient) UpdateTariff(ctx context.Context, in *UpdateTariffRequest, opts ...grpc.CallOption) (*UpdateTariffResponse, error) {
	out := new(UpdateTariffResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.Tariff/UpdateTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffClient) GetTariffById(ctx context.Context, in *GetTariffByIdRequest, opts ...grpc.CallOption) (*GetTariffByIdResponse, error) {
	out := new(GetTariffByIdResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.Tariff/GetTariffById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffClient) GetTariffsList(ctx context.Context, in *GetTariffsListRequest, opts ...grpc.CallOption) (*GetTariffsListResponse, error) {
	out := new(GetTariffsListResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.Tariff/GetTariffsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffClient) GetActiveTariffsList(ctx context.Context, in *GetActiveTariffsListRequest, opts ...grpc.CallOption) (*GetActiveTariffsListResponse, error) {
	out := new(GetActiveTariffsListResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.Tariff/GetActiveTariffsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffClient) CloseTariff(ctx context.Context, in *CloseTariffRequest, opts ...grpc.CallOption) (*CloseTariffResponse, error) {
	out := new(CloseTariffResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.Tariff/CloseTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffClient) SetTariffAsDefault(ctx context.Context, in *SetTariffAsDefaultRequest, opts ...grpc.CallOption) (*SetTariffAsDefaultResponse, error) {
	out := new(SetTariffAsDefaultResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.Tariff/SetTariffAsDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TariffServer is the server API for Tariff service.
// All implementations must embed UnimplementedTariffServer
// for forward compatibility
type TariffServer interface {
	CreateTariff(context.Context, *CreateTariffRequest) (*CreateTariffResponse, error)
	UpdateTariff(context.Context, *UpdateTariffRequest) (*UpdateTariffResponse, error)
	GetTariffById(context.Context, *GetTariffByIdRequest) (*GetTariffByIdResponse, error)
	GetTariffsList(context.Context, *GetTariffsListRequest) (*GetTariffsListResponse, error)
	GetActiveTariffsList(context.Context, *GetActiveTariffsListRequest) (*GetActiveTariffsListResponse, error)
	CloseTariff(context.Context, *CloseTariffRequest) (*CloseTariffResponse, error)
	SetTariffAsDefault(context.Context, *SetTariffAsDefaultRequest) (*SetTariffAsDefaultResponse, error)
	mustEmbedUnimplementedTariffServer()
}

// UnimplementedTariffServer must be embedded to have forward compatible implementations.
type UnimplementedTariffServer struct {
}

func (UnimplementedTariffServer) CreateTariff(context.Context, *CreateTariffRequest) (*CreateTariffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTariff not implemented")
}
func (UnimplementedTariffServer) UpdateTariff(context.Context, *UpdateTariffRequest) (*UpdateTariffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTariff not implemented")
}
func (UnimplementedTariffServer) GetTariffById(context.Context, *GetTariffByIdRequest) (*GetTariffByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariffById not implemented")
}
func (UnimplementedTariffServer) GetTariffsList(context.Context, *GetTariffsListRequest) (*GetTariffsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariffsList not implemented")
}
func (UnimplementedTariffServer) GetActiveTariffsList(context.Context, *GetActiveTariffsListRequest) (*GetActiveTariffsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTariffsList not implemented")
}
func (UnimplementedTariffServer) CloseTariff(context.Context, *CloseTariffRequest) (*CloseTariffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTariff not implemented")
}
func (UnimplementedTariffServer) SetTariffAsDefault(context.Context, *SetTariffAsDefaultRequest) (*SetTariffAsDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTariffAsDefault not implemented")
}
func (UnimplementedTariffServer) mustEmbedUnimplementedTariffServer() {}

// UnsafeTariffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TariffServer will
// result in compilation errors.
type UnsafeTariffServer interface {
	mustEmbedUnimplementedTariffServer()
}

func RegisterTariffServer(s grpc.ServiceRegistrar, srv TariffServer) {
	s.RegisterService(&Tariff_ServiceDesc, srv)
}

func _Tariff_CreateTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTariffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServer).CreateTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.Tariff/CreateTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServer).CreateTariff(ctx, req.(*CreateTariffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tariff_UpdateTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTariffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServer).UpdateTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.Tariff/UpdateTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServer).UpdateTariff(ctx, req.(*UpdateTariffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tariff_GetTariffById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTariffByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServer).GetTariffById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.Tariff/GetTariffById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServer).GetTariffById(ctx, req.(*GetTariffByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tariff_GetTariffsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTariffsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServer).GetTariffsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.Tariff/GetTariffsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServer).GetTariffsList(ctx, req.(*GetTariffsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tariff_GetActiveTariffsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTariffsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServer).GetActiveTariffsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.Tariff/GetActiveTariffsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServer).GetActiveTariffsList(ctx, req.(*GetActiveTariffsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tariff_CloseTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTariffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServer).CloseTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.Tariff/CloseTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServer).CloseTariff(ctx, req.(*CloseTariffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tariff_SetTariffAsDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTariffAsDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServer).SetTariffAsDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.Tariff/SetTariffAsDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServer).SetTariffAsDefault(ctx, req.(*SetTariffAsDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tariff_ServiceDesc is the grpc.ServiceDesc for Tariff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tariff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.api.billing.Tariff",
	HandlerType: (*TariffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTariff",
			Handler:    _Tariff_CreateTariff_Handler,
		},
		{
			MethodName: "UpdateTariff",
			Handler:    _Tariff_UpdateTariff_Handler,
		},
		{
			MethodName: "GetTariffById",
			Handler:    _Tariff_GetTariffById_Handler,
		},
		{
			MethodName: "GetTariffsList",
			Handler:    _Tariff_GetTariffsList_Handler,
		},
		{
			MethodName: "GetActiveTariffsList",
			Handler:    _Tariff_GetActiveTariffsList_Handler,
		},
		{
			MethodName: "CloseTariff",
			Handler:    _Tariff_CloseTariff_Handler,
		},
		{
			MethodName: "SetTariffAsDefault",
			Handler:    _Tariff_SetTariffAsDefault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/api/billing/tariff_service.proto",
}
