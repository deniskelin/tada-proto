// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/api/billing/personal_account_service.proto

package billing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonalAccountClient is the client API for PersonalAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalAccountClient interface {
	CreatePersonalAccount(ctx context.Context, in *CreatePersonalAccountRequest, opts ...grpc.CallOption) (*CreatePersonalAccountResponse, error)
	GetPersonalAccountsList(ctx context.Context, in *GetPersonalAccountsListRequest, opts ...grpc.CallOption) (*GetPersonalAccountsListResponse, error)
	GetPersonalAccountByID(ctx context.Context, in *GetPersonalAccountByIDRequest, opts ...grpc.CallOption) (*GetPersonalAccountByIDResponse, error)
	GetPersonalAccountIDByOwnerUUID(ctx context.Context, in *GetPersonalAccountIDByOwnerUUIDRequest, opts ...grpc.CallOption) (*GetPersonalAccountIDByOwnerUUIDResponse, error)
	GetPersonalAccountIDByTeamUUID(ctx context.Context, in *GetPersonalAccountIDByTeamUUIDRequest, opts ...grpc.CallOption) (*GetPersonalAccountIDByTeamUUIDResponse, error)
	ActivatePersonalAccount(ctx context.Context, in *ActivatePersonalAccountRequest, opts ...grpc.CallOption) (*ActivatePersonalAccountResponse, error)
	BlockPersonalAccount(ctx context.Context, in *BlockPersonalAccountRequest, opts ...grpc.CallOption) (*BlockPersonalAccountResponse, error)
	UnblockPersonalAccount(ctx context.Context, in *UnblockPersonalAccountRequest, opts ...grpc.CallOption) (*UnblockPersonalAccountResponse, error)
	SuspendPersonalAccount(ctx context.Context, in *SuspendPersonalAccountRequest, opts ...grpc.CallOption) (*SuspendPersonalAccountResponse, error)
	UpdatePersonalAccount(ctx context.Context, in *UpdatePersonalAccountRequest, opts ...grpc.CallOption) (*UpdatePersonalAccountResponse, error)
	CheckActivePersonalAccount(ctx context.Context, in *CheckActivePersonalAccountRequest, opts ...grpc.CallOption) (*CheckActivePersonalAccountResponse, error)
	ChangeDateOfDebitingFundsOnPersonalAccount(ctx context.Context, in *ChangeDateOfDebitingFundsOnPersonalAccountRequest, opts ...grpc.CallOption) (*ChangeDateOfDebitingFundsOnPersonalAccountResponse, error)
	GetUsersByPersonalAccount(ctx context.Context, in *GetUsersByPersonalAccountRequest, opts ...grpc.CallOption) (*GetUsersByPersonalAccountResponse, error)
	GetDiskSpaceQuotaOnPersonalAccount(ctx context.Context, in *GetDiskSpaceQuotaOnPersonalAccountRequest, opts ...grpc.CallOption) (*GetDiskSpaceQuotaOnPersonalAccountResponse, error)
	GetCostOfWorkplacesOnPersonalAccount(ctx context.Context, in *GetCostOfWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*GetCostOfWorkplacesOnPersonalAccountResponse, error)
	DeletePersonalAccount(ctx context.Context, in *DeletePersonalAccountRequest, opts ...grpc.CallOption) (*DeletePersonalAccountResponse, error)
}

type personalAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalAccountClient(cc grpc.ClientConnInterface) PersonalAccountClient {
	return &personalAccountClient{cc}
}

func (c *personalAccountClient) CreatePersonalAccount(ctx context.Context, in *CreatePersonalAccountRequest, opts ...grpc.CallOption) (*CreatePersonalAccountResponse, error) {
	out := new(CreatePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/CreatePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetPersonalAccountsList(ctx context.Context, in *GetPersonalAccountsListRequest, opts ...grpc.CallOption) (*GetPersonalAccountsListResponse, error) {
	out := new(GetPersonalAccountsListResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/GetPersonalAccountsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetPersonalAccountByID(ctx context.Context, in *GetPersonalAccountByIDRequest, opts ...grpc.CallOption) (*GetPersonalAccountByIDResponse, error) {
	out := new(GetPersonalAccountByIDResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/GetPersonalAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetPersonalAccountIDByOwnerUUID(ctx context.Context, in *GetPersonalAccountIDByOwnerUUIDRequest, opts ...grpc.CallOption) (*GetPersonalAccountIDByOwnerUUIDResponse, error) {
	out := new(GetPersonalAccountIDByOwnerUUIDResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/GetPersonalAccountIDByOwnerUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetPersonalAccountIDByTeamUUID(ctx context.Context, in *GetPersonalAccountIDByTeamUUIDRequest, opts ...grpc.CallOption) (*GetPersonalAccountIDByTeamUUIDResponse, error) {
	out := new(GetPersonalAccountIDByTeamUUIDResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/GetPersonalAccountIDByTeamUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) ActivatePersonalAccount(ctx context.Context, in *ActivatePersonalAccountRequest, opts ...grpc.CallOption) (*ActivatePersonalAccountResponse, error) {
	out := new(ActivatePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/ActivatePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) BlockPersonalAccount(ctx context.Context, in *BlockPersonalAccountRequest, opts ...grpc.CallOption) (*BlockPersonalAccountResponse, error) {
	out := new(BlockPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/BlockPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) UnblockPersonalAccount(ctx context.Context, in *UnblockPersonalAccountRequest, opts ...grpc.CallOption) (*UnblockPersonalAccountResponse, error) {
	out := new(UnblockPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/UnblockPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) SuspendPersonalAccount(ctx context.Context, in *SuspendPersonalAccountRequest, opts ...grpc.CallOption) (*SuspendPersonalAccountResponse, error) {
	out := new(SuspendPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/SuspendPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) UpdatePersonalAccount(ctx context.Context, in *UpdatePersonalAccountRequest, opts ...grpc.CallOption) (*UpdatePersonalAccountResponse, error) {
	out := new(UpdatePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/UpdatePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) CheckActivePersonalAccount(ctx context.Context, in *CheckActivePersonalAccountRequest, opts ...grpc.CallOption) (*CheckActivePersonalAccountResponse, error) {
	out := new(CheckActivePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/CheckActivePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) ChangeDateOfDebitingFundsOnPersonalAccount(ctx context.Context, in *ChangeDateOfDebitingFundsOnPersonalAccountRequest, opts ...grpc.CallOption) (*ChangeDateOfDebitingFundsOnPersonalAccountResponse, error) {
	out := new(ChangeDateOfDebitingFundsOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/ChangeDateOfDebitingFundsOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetUsersByPersonalAccount(ctx context.Context, in *GetUsersByPersonalAccountRequest, opts ...grpc.CallOption) (*GetUsersByPersonalAccountResponse, error) {
	out := new(GetUsersByPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/GetUsersByPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetDiskSpaceQuotaOnPersonalAccount(ctx context.Context, in *GetDiskSpaceQuotaOnPersonalAccountRequest, opts ...grpc.CallOption) (*GetDiskSpaceQuotaOnPersonalAccountResponse, error) {
	out := new(GetDiskSpaceQuotaOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/GetDiskSpaceQuotaOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) GetCostOfWorkplacesOnPersonalAccount(ctx context.Context, in *GetCostOfWorkplacesOnPersonalAccountRequest, opts ...grpc.CallOption) (*GetCostOfWorkplacesOnPersonalAccountResponse, error) {
	out := new(GetCostOfWorkplacesOnPersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/GetCostOfWorkplacesOnPersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountClient) DeletePersonalAccount(ctx context.Context, in *DeletePersonalAccountRequest, opts ...grpc.CallOption) (*DeletePersonalAccountResponse, error) {
	out := new(DeletePersonalAccountResponse)
	err := c.cc.Invoke(ctx, "/tada.api.billing.PersonalAccount/DeletePersonalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalAccountServer is the server API for PersonalAccount service.
// All implementations must embed UnimplementedPersonalAccountServer
// for forward compatibility
type PersonalAccountServer interface {
	CreatePersonalAccount(context.Context, *CreatePersonalAccountRequest) (*CreatePersonalAccountResponse, error)
	GetPersonalAccountsList(context.Context, *GetPersonalAccountsListRequest) (*GetPersonalAccountsListResponse, error)
	GetPersonalAccountByID(context.Context, *GetPersonalAccountByIDRequest) (*GetPersonalAccountByIDResponse, error)
	GetPersonalAccountIDByOwnerUUID(context.Context, *GetPersonalAccountIDByOwnerUUIDRequest) (*GetPersonalAccountIDByOwnerUUIDResponse, error)
	GetPersonalAccountIDByTeamUUID(context.Context, *GetPersonalAccountIDByTeamUUIDRequest) (*GetPersonalAccountIDByTeamUUIDResponse, error)
	ActivatePersonalAccount(context.Context, *ActivatePersonalAccountRequest) (*ActivatePersonalAccountResponse, error)
	BlockPersonalAccount(context.Context, *BlockPersonalAccountRequest) (*BlockPersonalAccountResponse, error)
	UnblockPersonalAccount(context.Context, *UnblockPersonalAccountRequest) (*UnblockPersonalAccountResponse, error)
	SuspendPersonalAccount(context.Context, *SuspendPersonalAccountRequest) (*SuspendPersonalAccountResponse, error)
	UpdatePersonalAccount(context.Context, *UpdatePersonalAccountRequest) (*UpdatePersonalAccountResponse, error)
	CheckActivePersonalAccount(context.Context, *CheckActivePersonalAccountRequest) (*CheckActivePersonalAccountResponse, error)
	ChangeDateOfDebitingFundsOnPersonalAccount(context.Context, *ChangeDateOfDebitingFundsOnPersonalAccountRequest) (*ChangeDateOfDebitingFundsOnPersonalAccountResponse, error)
	GetUsersByPersonalAccount(context.Context, *GetUsersByPersonalAccountRequest) (*GetUsersByPersonalAccountResponse, error)
	GetDiskSpaceQuotaOnPersonalAccount(context.Context, *GetDiskSpaceQuotaOnPersonalAccountRequest) (*GetDiskSpaceQuotaOnPersonalAccountResponse, error)
	GetCostOfWorkplacesOnPersonalAccount(context.Context, *GetCostOfWorkplacesOnPersonalAccountRequest) (*GetCostOfWorkplacesOnPersonalAccountResponse, error)
	DeletePersonalAccount(context.Context, *DeletePersonalAccountRequest) (*DeletePersonalAccountResponse, error)
	mustEmbedUnimplementedPersonalAccountServer()
}

// UnimplementedPersonalAccountServer must be embedded to have forward compatible implementations.
type UnimplementedPersonalAccountServer struct {
}

func (UnimplementedPersonalAccountServer) CreatePersonalAccount(context.Context, *CreatePersonalAccountRequest) (*CreatePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) GetPersonalAccountsList(context.Context, *GetPersonalAccountsListRequest) (*GetPersonalAccountsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountsList not implemented")
}
func (UnimplementedPersonalAccountServer) GetPersonalAccountByID(context.Context, *GetPersonalAccountByIDRequest) (*GetPersonalAccountByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountByID not implemented")
}
func (UnimplementedPersonalAccountServer) GetPersonalAccountIDByOwnerUUID(context.Context, *GetPersonalAccountIDByOwnerUUIDRequest) (*GetPersonalAccountIDByOwnerUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountIDByOwnerUUID not implemented")
}
func (UnimplementedPersonalAccountServer) GetPersonalAccountIDByTeamUUID(context.Context, *GetPersonalAccountIDByTeamUUIDRequest) (*GetPersonalAccountIDByTeamUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccountIDByTeamUUID not implemented")
}
func (UnimplementedPersonalAccountServer) ActivatePersonalAccount(context.Context, *ActivatePersonalAccountRequest) (*ActivatePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) BlockPersonalAccount(context.Context, *BlockPersonalAccountRequest) (*BlockPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) UnblockPersonalAccount(context.Context, *UnblockPersonalAccountRequest) (*UnblockPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) SuspendPersonalAccount(context.Context, *SuspendPersonalAccountRequest) (*SuspendPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) UpdatePersonalAccount(context.Context, *UpdatePersonalAccountRequest) (*UpdatePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) CheckActivePersonalAccount(context.Context, *CheckActivePersonalAccountRequest) (*CheckActivePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActivePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) ChangeDateOfDebitingFundsOnPersonalAccount(context.Context, *ChangeDateOfDebitingFundsOnPersonalAccountRequest) (*ChangeDateOfDebitingFundsOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDateOfDebitingFundsOnPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) GetUsersByPersonalAccount(context.Context, *GetUsersByPersonalAccountRequest) (*GetUsersByPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) GetDiskSpaceQuotaOnPersonalAccount(context.Context, *GetDiskSpaceQuotaOnPersonalAccountRequest) (*GetDiskSpaceQuotaOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskSpaceQuotaOnPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) GetCostOfWorkplacesOnPersonalAccount(context.Context, *GetCostOfWorkplacesOnPersonalAccountRequest) (*GetCostOfWorkplacesOnPersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostOfWorkplacesOnPersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) DeletePersonalAccount(context.Context, *DeletePersonalAccountRequest) (*DeletePersonalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonalAccount not implemented")
}
func (UnimplementedPersonalAccountServer) mustEmbedUnimplementedPersonalAccountServer() {}

// UnsafePersonalAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalAccountServer will
// result in compilation errors.
type UnsafePersonalAccountServer interface {
	mustEmbedUnimplementedPersonalAccountServer()
}

func RegisterPersonalAccountServer(s grpc.ServiceRegistrar, srv PersonalAccountServer) {
	s.RegisterService(&PersonalAccount_ServiceDesc, srv)
}

func _PersonalAccount_CreatePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).CreatePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/CreatePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).CreatePersonalAccount(ctx, req.(*CreatePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetPersonalAccountsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalAccountsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/GetPersonalAccountsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountsList(ctx, req.(*GetPersonalAccountsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetPersonalAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalAccountByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/GetPersonalAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountByID(ctx, req.(*GetPersonalAccountByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetPersonalAccountIDByOwnerUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalAccountIDByOwnerUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByOwnerUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/GetPersonalAccountIDByOwnerUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByOwnerUUID(ctx, req.(*GetPersonalAccountIDByOwnerUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetPersonalAccountIDByTeamUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalAccountIDByTeamUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByTeamUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/GetPersonalAccountIDByTeamUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetPersonalAccountIDByTeamUUID(ctx, req.(*GetPersonalAccountIDByTeamUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_ActivatePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivatePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).ActivatePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/ActivatePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).ActivatePersonalAccount(ctx, req.(*ActivatePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_BlockPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).BlockPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/BlockPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).BlockPersonalAccount(ctx, req.(*BlockPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_UnblockPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).UnblockPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/UnblockPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).UnblockPersonalAccount(ctx, req.(*UnblockPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_SuspendPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).SuspendPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/SuspendPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).SuspendPersonalAccount(ctx, req.(*SuspendPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_UpdatePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).UpdatePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/UpdatePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).UpdatePersonalAccount(ctx, req.(*UpdatePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_CheckActivePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActivePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).CheckActivePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/CheckActivePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).CheckActivePersonalAccount(ctx, req.(*CheckActivePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_ChangeDateOfDebitingFundsOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDateOfDebitingFundsOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).ChangeDateOfDebitingFundsOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/ChangeDateOfDebitingFundsOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).ChangeDateOfDebitingFundsOnPersonalAccount(ctx, req.(*ChangeDateOfDebitingFundsOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetUsersByPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetUsersByPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/GetUsersByPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetUsersByPersonalAccount(ctx, req.(*GetUsersByPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetDiskSpaceQuotaOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskSpaceQuotaOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetDiskSpaceQuotaOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/GetDiskSpaceQuotaOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetDiskSpaceQuotaOnPersonalAccount(ctx, req.(*GetDiskSpaceQuotaOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_GetCostOfWorkplacesOnPersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostOfWorkplacesOnPersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).GetCostOfWorkplacesOnPersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/GetCostOfWorkplacesOnPersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).GetCostOfWorkplacesOnPersonalAccount(ctx, req.(*GetCostOfWorkplacesOnPersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccount_DeletePersonalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServer).DeletePersonalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.billing.PersonalAccount/DeletePersonalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServer).DeletePersonalAccount(ctx, req.(*DeletePersonalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalAccount_ServiceDesc is the grpc.ServiceDesc for PersonalAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.api.billing.PersonalAccount",
	HandlerType: (*PersonalAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersonalAccount",
			Handler:    _PersonalAccount_CreatePersonalAccount_Handler,
		},
		{
			MethodName: "GetPersonalAccountsList",
			Handler:    _PersonalAccount_GetPersonalAccountsList_Handler,
		},
		{
			MethodName: "GetPersonalAccountByID",
			Handler:    _PersonalAccount_GetPersonalAccountByID_Handler,
		},
		{
			MethodName: "GetPersonalAccountIDByOwnerUUID",
			Handler:    _PersonalAccount_GetPersonalAccountIDByOwnerUUID_Handler,
		},
		{
			MethodName: "GetPersonalAccountIDByTeamUUID",
			Handler:    _PersonalAccount_GetPersonalAccountIDByTeamUUID_Handler,
		},
		{
			MethodName: "ActivatePersonalAccount",
			Handler:    _PersonalAccount_ActivatePersonalAccount_Handler,
		},
		{
			MethodName: "BlockPersonalAccount",
			Handler:    _PersonalAccount_BlockPersonalAccount_Handler,
		},
		{
			MethodName: "UnblockPersonalAccount",
			Handler:    _PersonalAccount_UnblockPersonalAccount_Handler,
		},
		{
			MethodName: "SuspendPersonalAccount",
			Handler:    _PersonalAccount_SuspendPersonalAccount_Handler,
		},
		{
			MethodName: "UpdatePersonalAccount",
			Handler:    _PersonalAccount_UpdatePersonalAccount_Handler,
		},
		{
			MethodName: "CheckActivePersonalAccount",
			Handler:    _PersonalAccount_CheckActivePersonalAccount_Handler,
		},
		{
			MethodName: "ChangeDateOfDebitingFundsOnPersonalAccount",
			Handler:    _PersonalAccount_ChangeDateOfDebitingFundsOnPersonalAccount_Handler,
		},
		{
			MethodName: "GetUsersByPersonalAccount",
			Handler:    _PersonalAccount_GetUsersByPersonalAccount_Handler,
		},
		{
			MethodName: "GetDiskSpaceQuotaOnPersonalAccount",
			Handler:    _PersonalAccount_GetDiskSpaceQuotaOnPersonalAccount_Handler,
		},
		{
			MethodName: "GetCostOfWorkplacesOnPersonalAccount",
			Handler:    _PersonalAccount_GetCostOfWorkplacesOnPersonalAccount_Handler,
		},
		{
			MethodName: "DeletePersonalAccount",
			Handler:    _PersonalAccount_DeletePersonalAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/api/billing/personal_account_service.proto",
}
