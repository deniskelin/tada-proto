// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tada/api/meeting/calendar_service.proto

package meetingApiPb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeetingMemberStatus int32

const (
	MeetingMemberStatus_MEETING_MEMBER_STATUS_UNSPECIFIED     MeetingMemberStatus = 0
	MeetingMemberStatus_MEETING_MEMBER_STATUS_OWNER           MeetingMemberStatus = 1
	MeetingMemberStatus_MEETING_MEMBER_STATUS_ADMIN           MeetingMemberStatus = 2
	MeetingMemberStatus_MEETING_MEMBER_STATUS_MEMBER          MeetingMemberStatus = 3
	MeetingMemberStatus_MEETING_MEMBER_STATUS_OPTIONAL_MEMBER MeetingMemberStatus = 4
)

// Enum value maps for MeetingMemberStatus.
var (
	MeetingMemberStatus_name = map[int32]string{
		0: "MEETING_MEMBER_STATUS_UNSPECIFIED",
		1: "MEETING_MEMBER_STATUS_OWNER",
		2: "MEETING_MEMBER_STATUS_ADMIN",
		3: "MEETING_MEMBER_STATUS_MEMBER",
		4: "MEETING_MEMBER_STATUS_OPTIONAL_MEMBER",
	}
	MeetingMemberStatus_value = map[string]int32{
		"MEETING_MEMBER_STATUS_UNSPECIFIED":     0,
		"MEETING_MEMBER_STATUS_OWNER":           1,
		"MEETING_MEMBER_STATUS_ADMIN":           2,
		"MEETING_MEMBER_STATUS_MEMBER":          3,
		"MEETING_MEMBER_STATUS_OPTIONAL_MEMBER": 4,
	}
)

func (x MeetingMemberStatus) Enum() *MeetingMemberStatus {
	p := new(MeetingMemberStatus)
	*p = x
	return p
}

func (x MeetingMemberStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeetingMemberStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tada_api_meeting_calendar_service_proto_enumTypes[0].Descriptor()
}

func (MeetingMemberStatus) Type() protoreflect.EnumType {
	return &file_tada_api_meeting_calendar_service_proto_enumTypes[0]
}

func (x MeetingMemberStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeetingMemberStatus.Descriptor instead.
func (MeetingMemberStatus) EnumDescriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{0}
}

type MeetingPresenceStatus int32

const (
	MeetingPresenceStatus_MEETING_PRESENCE_STATUS_UNSPECIFIED MeetingPresenceStatus = 0
	MeetingPresenceStatus_MEETING_PRESENCE_STATUS_ACCEPTED    MeetingPresenceStatus = 1
	MeetingPresenceStatus_MEETING_PRESENCE_STATUS_REJECTED    MeetingPresenceStatus = 2
	MeetingPresenceStatus_MEETING_PRESENCE_STATUS_DOUBTS      MeetingPresenceStatus = 3
	MeetingPresenceStatus_MEETING_PRESENCE_STATUS_WAITING     MeetingPresenceStatus = 4
)

// Enum value maps for MeetingPresenceStatus.
var (
	MeetingPresenceStatus_name = map[int32]string{
		0: "MEETING_PRESENCE_STATUS_UNSPECIFIED",
		1: "MEETING_PRESENCE_STATUS_ACCEPTED",
		2: "MEETING_PRESENCE_STATUS_REJECTED",
		3: "MEETING_PRESENCE_STATUS_DOUBTS",
		4: "MEETING_PRESENCE_STATUS_WAITING",
	}
	MeetingPresenceStatus_value = map[string]int32{
		"MEETING_PRESENCE_STATUS_UNSPECIFIED": 0,
		"MEETING_PRESENCE_STATUS_ACCEPTED":    1,
		"MEETING_PRESENCE_STATUS_REJECTED":    2,
		"MEETING_PRESENCE_STATUS_DOUBTS":      3,
		"MEETING_PRESENCE_STATUS_WAITING":     4,
	}
)

func (x MeetingPresenceStatus) Enum() *MeetingPresenceStatus {
	p := new(MeetingPresenceStatus)
	*p = x
	return p
}

func (x MeetingPresenceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeetingPresenceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tada_api_meeting_calendar_service_proto_enumTypes[1].Descriptor()
}

func (MeetingPresenceStatus) Type() protoreflect.EnumType {
	return &file_tada_api_meeting_calendar_service_proto_enumTypes[1]
}

func (x MeetingPresenceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeetingPresenceStatus.Descriptor instead.
func (MeetingPresenceStatus) EnumDescriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{1}
}

type MeetingRepeatabilityType int32

const (
	MeetingRepeatabilityType_MEETING_REPEATABILITY_TYPE_UNSPECIFIED  MeetingRepeatabilityType = 0
	MeetingRepeatabilityType_MEETING_REPEATABILITY_TYPE_DAILY        MeetingRepeatabilityType = 1
	MeetingRepeatabilityType_MEETING_REPEATABILITY_TYPE_WEEKLY       MeetingRepeatabilityType = 2
	MeetingRepeatabilityType_MEETING_REPEATABILITY_TYPE_MONTHLY      MeetingRepeatabilityType = 3
	MeetingRepeatabilityType_MEETING_REPEATABILITY_TYPE_MONTHLY_NDOW MeetingRepeatabilityType = 4
	MeetingRepeatabilityType_MEETING_REPEATABILITY_TYPE_ANNUALLY     MeetingRepeatabilityType = 5
)

// Enum value maps for MeetingRepeatabilityType.
var (
	MeetingRepeatabilityType_name = map[int32]string{
		0: "MEETING_REPEATABILITY_TYPE_UNSPECIFIED",
		1: "MEETING_REPEATABILITY_TYPE_DAILY",
		2: "MEETING_REPEATABILITY_TYPE_WEEKLY",
		3: "MEETING_REPEATABILITY_TYPE_MONTHLY",
		4: "MEETING_REPEATABILITY_TYPE_MONTHLY_NDOW",
		5: "MEETING_REPEATABILITY_TYPE_ANNUALLY",
	}
	MeetingRepeatabilityType_value = map[string]int32{
		"MEETING_REPEATABILITY_TYPE_UNSPECIFIED":  0,
		"MEETING_REPEATABILITY_TYPE_DAILY":        1,
		"MEETING_REPEATABILITY_TYPE_WEEKLY":       2,
		"MEETING_REPEATABILITY_TYPE_MONTHLY":      3,
		"MEETING_REPEATABILITY_TYPE_MONTHLY_NDOW": 4,
		"MEETING_REPEATABILITY_TYPE_ANNUALLY":     5,
	}
)

func (x MeetingRepeatabilityType) Enum() *MeetingRepeatabilityType {
	p := new(MeetingRepeatabilityType)
	*p = x
	return p
}

func (x MeetingRepeatabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeetingRepeatabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_tada_api_meeting_calendar_service_proto_enumTypes[2].Descriptor()
}

func (MeetingRepeatabilityType) Type() protoreflect.EnumType {
	return &file_tada_api_meeting_calendar_service_proto_enumTypes[2]
}

func (x MeetingRepeatabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeetingRepeatabilityType.Descriptor instead.
func (MeetingRepeatabilityType) EnumDescriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{2}
}

type Meeting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId         uint64                 `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	PersonalAccountId uint64                 `protobuf:"varint,2,opt,name=personal_account_id,json=personalAccountId,proto3" json:"personal_account_id,omitempty"`
	Duration          int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	IsOutside         bool                   `protobuf:"varint,4,opt,name=is_outside,json=isOutside,proto3" json:"is_outside,omitempty"`
	GroupUuid         string                 `protobuf:"bytes,5,opt,name=group_uuid,json=groupUuid,proto3" json:"group_uuid,omitempty"`
	TeamUuid          string                 `protobuf:"bytes,6,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	OwnerUuid         string                 `protobuf:"bytes,7,opt,name=owner_uuid,json=ownerUuid,proto3" json:"owner_uuid,omitempty"`
	OwnerJid          string                 `protobuf:"bytes,8,opt,name=owner_jid,json=ownerJid,proto3" json:"owner_jid,omitempty"`
	StartAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Freq              *Freq                  `protobuf:"bytes,10,opt,name=freq,proto3,oneof" json:"freq,omitempty"`
	Members           []*Member              `protobuf:"bytes,11,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *Meeting) Reset() {
	*x = Meeting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meeting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meeting) ProtoMessage() {}

func (x *Meeting) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meeting.ProtoReflect.Descriptor instead.
func (*Meeting) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{0}
}

func (x *Meeting) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *Meeting) GetPersonalAccountId() uint64 {
	if x != nil {
		return x.PersonalAccountId
	}
	return 0
}

func (x *Meeting) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Meeting) GetIsOutside() bool {
	if x != nil {
		return x.IsOutside
	}
	return false
}

func (x *Meeting) GetGroupUuid() string {
	if x != nil {
		return x.GroupUuid
	}
	return ""
}

func (x *Meeting) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *Meeting) GetOwnerUuid() string {
	if x != nil {
		return x.OwnerUuid
	}
	return ""
}

func (x *Meeting) GetOwnerJid() string {
	if x != nil {
		return x.OwnerJid
	}
	return ""
}

func (x *Meeting) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Meeting) GetFreq() *Freq {
	if x != nil {
		return x.Freq
	}
	return nil
}

func (x *Meeting) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type Freq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frequency         int32                    `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	RepeatabilityType MeetingRepeatabilityType `protobuf:"varint,2,opt,name=repeatability_type,json=repeatabilityType,proto3,enum=tada.api.meeting.MeetingRepeatabilityType" json:"repeatability_type,omitempty"`
	DaysWeek          []int32                  `protobuf:"varint,3,rep,packed,name=days_week,json=daysWeek,proto3" json:"days_week,omitempty"`
}

func (x *Freq) Reset() {
	*x = Freq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Freq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Freq) ProtoMessage() {}

func (x *Freq) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Freq.ProtoReflect.Descriptor instead.
func (*Freq) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{1}
}

func (x *Freq) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Freq) GetRepeatabilityType() MeetingRepeatabilityType {
	if x != nil {
		return x.RepeatabilityType
	}
	return MeetingRepeatabilityType_MEETING_REPEATABILITY_TYPE_UNSPECIFIED
}

func (x *Freq) GetDaysWeek() []int32 {
	if x != nil {
		return x.DaysWeek
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId      *uint64               `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3,oneof" json:"meeting_id,omitempty"`
	ContactUuid    string                `protobuf:"bytes,2,opt,name=contact_uuid,json=contactUuid,proto3" json:"contact_uuid,omitempty"`
	UserUuid       string                `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	ChatUuid       string                `protobuf:"bytes,4,opt,name=chat_uuid,json=chatUuid,proto3" json:"chat_uuid,omitempty"`
	MemberStatus   MeetingMemberStatus   `protobuf:"varint,5,opt,name=member_status,json=memberStatus,proto3,enum=tada.api.meeting.MeetingMemberStatus" json:"member_status,omitempty"`
	PresenceStatus MeetingPresenceStatus `protobuf:"varint,6,opt,name=presence_status,json=presenceStatus,proto3,enum=tada.api.meeting.MeetingPresenceStatus" json:"presence_status,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{2}
}

func (x *Member) GetMeetingId() uint64 {
	if x != nil && x.MeetingId != nil {
		return *x.MeetingId
	}
	return 0
}

func (x *Member) GetContactUuid() string {
	if x != nil {
		return x.ContactUuid
	}
	return ""
}

func (x *Member) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *Member) GetChatUuid() string {
	if x != nil {
		return x.ChatUuid
	}
	return ""
}

func (x *Member) GetMemberStatus() MeetingMemberStatus {
	if x != nil {
		return x.MemberStatus
	}
	return MeetingMemberStatus_MEETING_MEMBER_STATUS_UNSPECIFIED
}

func (x *Member) GetPresenceStatus() MeetingPresenceStatus {
	if x != nil {
		return x.PresenceStatus
	}
	return MeetingPresenceStatus_MEETING_PRESENCE_STATUS_UNSPECIFIED
}

type GetMeetingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateFrom          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	DateTo            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	PersonalAccountId *uint64                `protobuf:"varint,3,opt,name=personal_account_id,json=personalAccountId,proto3,oneof" json:"personal_account_id,omitempty"`
	Limit             *int32                 `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset            *int32                 `protobuf:"varint,5,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	IsOutside         *bool                  `protobuf:"varint,6,opt,name=is_outside,json=isOutside,proto3,oneof" json:"is_outside,omitempty"`
	TeamUuid          *string                `protobuf:"bytes,7,opt,name=team_uuid,json=teamUuid,proto3,oneof" json:"team_uuid,omitempty"`
	ContactUuid       []string               `protobuf:"bytes,8,rep,name=contact_uuid,json=contactUuid,proto3" json:"contact_uuid,omitempty"`
	UserUuid          []string               `protobuf:"bytes,9,rep,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *GetMeetingsRequest) Reset() {
	*x = GetMeetingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingsRequest) ProtoMessage() {}

func (x *GetMeetingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingsRequest.ProtoReflect.Descriptor instead.
func (*GetMeetingsRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMeetingsRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *GetMeetingsRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

func (x *GetMeetingsRequest) GetPersonalAccountId() uint64 {
	if x != nil && x.PersonalAccountId != nil {
		return *x.PersonalAccountId
	}
	return 0
}

func (x *GetMeetingsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetMeetingsRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetMeetingsRequest) GetIsOutside() bool {
	if x != nil && x.IsOutside != nil {
		return *x.IsOutside
	}
	return false
}

func (x *GetMeetingsRequest) GetTeamUuid() string {
	if x != nil && x.TeamUuid != nil {
		return *x.TeamUuid
	}
	return ""
}

func (x *GetMeetingsRequest) GetContactUuid() []string {
	if x != nil {
		return x.ContactUuid
	}
	return nil
}

func (x *GetMeetingsRequest) GetUserUuid() []string {
	if x != nil {
		return x.UserUuid
	}
	return nil
}

type GetMeetingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meetings []*Meeting `protobuf:"bytes,1,rep,name=meetings,proto3" json:"meetings,omitempty"`
	Limit    *int32     `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset   *int32     `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	Total    *int32     `protobuf:"varint,4,opt,name=total,proto3,oneof" json:"total,omitempty"`
}

func (x *GetMeetingsResponse) Reset() {
	*x = GetMeetingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingsResponse) ProtoMessage() {}

func (x *GetMeetingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingsResponse.ProtoReflect.Descriptor instead.
func (*GetMeetingsResponse) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetMeetingsResponse) GetMeetings() []*Meeting {
	if x != nil {
		return x.Meetings
	}
	return nil
}

func (x *GetMeetingsResponse) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetMeetingsResponse) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetMeetingsResponse) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CreateMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonalAccountId *uint64                `protobuf:"varint,1,opt,name=personal_account_id,json=personalAccountId,proto3,oneof" json:"personal_account_id,omitempty"`
	Duration          int32                  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	IsOutside         bool                   `protobuf:"varint,3,opt,name=is_outside,json=isOutside,proto3" json:"is_outside,omitempty"`
	GroupUuid         string                 `protobuf:"bytes,4,opt,name=group_uuid,json=groupUuid,proto3" json:"group_uuid,omitempty"`
	TeamUuid          string                 `protobuf:"bytes,5,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	OwnerUuid         string                 `protobuf:"bytes,6,opt,name=owner_uuid,json=ownerUuid,proto3" json:"owner_uuid,omitempty"`
	OwnerJid          string                 `protobuf:"bytes,7,opt,name=owner_jid,json=ownerJid,proto3" json:"owner_jid,omitempty"`
	StartAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Freq              *Freq                  `protobuf:"bytes,9,opt,name=freq,proto3,oneof" json:"freq,omitempty"`
	Members           []*Member              `protobuf:"bytes,10,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *CreateMeetingRequest) Reset() {
	*x = CreateMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeetingRequest) ProtoMessage() {}

func (x *CreateMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeetingRequest.ProtoReflect.Descriptor instead.
func (*CreateMeetingRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateMeetingRequest) GetPersonalAccountId() uint64 {
	if x != nil && x.PersonalAccountId != nil {
		return *x.PersonalAccountId
	}
	return 0
}

func (x *CreateMeetingRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateMeetingRequest) GetIsOutside() bool {
	if x != nil {
		return x.IsOutside
	}
	return false
}

func (x *CreateMeetingRequest) GetGroupUuid() string {
	if x != nil {
		return x.GroupUuid
	}
	return ""
}

func (x *CreateMeetingRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *CreateMeetingRequest) GetOwnerUuid() string {
	if x != nil {
		return x.OwnerUuid
	}
	return ""
}

func (x *CreateMeetingRequest) GetOwnerJid() string {
	if x != nil {
		return x.OwnerJid
	}
	return ""
}

func (x *CreateMeetingRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CreateMeetingRequest) GetFreq() *Freq {
	if x != nil {
		return x.Freq
	}
	return nil
}

func (x *CreateMeetingRequest) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type UpdateMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId uint64                 `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	Duration  *int32                 `protobuf:"varint,2,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	IsOutside *bool                  `protobuf:"varint,3,opt,name=is_outside,json=isOutside,proto3,oneof" json:"is_outside,omitempty"`
	GroupUuid *string                `protobuf:"bytes,4,opt,name=group_uuid,json=groupUuid,proto3,oneof" json:"group_uuid,omitempty"`
	TeamUuid  *string                `protobuf:"bytes,5,opt,name=team_uuid,json=teamUuid,proto3,oneof" json:"team_uuid,omitempty"`
	OwnerUuid *string                `protobuf:"bytes,6,opt,name=owner_uuid,json=ownerUuid,proto3,oneof" json:"owner_uuid,omitempty"`
	OwnerJid  *string                `protobuf:"bytes,7,opt,name=owner_jid,json=ownerJid,proto3,oneof" json:"owner_jid,omitempty"`
	Freq      *Freq                  `protobuf:"bytes,8,opt,name=freq,proto3,oneof" json:"freq,omitempty"`
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_at,json=startAt,proto3,oneof" json:"start_at,omitempty"`
}

func (x *UpdateMeetingRequest) Reset() {
	*x = UpdateMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeetingRequest) ProtoMessage() {}

func (x *UpdateMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeetingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMeetingRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMeetingRequest) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *UpdateMeetingRequest) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *UpdateMeetingRequest) GetIsOutside() bool {
	if x != nil && x.IsOutside != nil {
		return *x.IsOutside
	}
	return false
}

func (x *UpdateMeetingRequest) GetGroupUuid() string {
	if x != nil && x.GroupUuid != nil {
		return *x.GroupUuid
	}
	return ""
}

func (x *UpdateMeetingRequest) GetTeamUuid() string {
	if x != nil && x.TeamUuid != nil {
		return *x.TeamUuid
	}
	return ""
}

func (x *UpdateMeetingRequest) GetOwnerUuid() string {
	if x != nil && x.OwnerUuid != nil {
		return *x.OwnerUuid
	}
	return ""
}

func (x *UpdateMeetingRequest) GetOwnerJid() string {
	if x != nil && x.OwnerJid != nil {
		return *x.OwnerJid
	}
	return ""
}

func (x *UpdateMeetingRequest) GetFreq() *Freq {
	if x != nil {
		return x.Freq
	}
	return nil
}

func (x *UpdateMeetingRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

type GetMeetingMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId      uint64                 `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	Limit          *int32                 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset         *int32                 `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	MemberStatus   *MeetingMemberStatus   `protobuf:"varint,4,opt,name=member_status,json=memberStatus,proto3,enum=tada.api.meeting.MeetingMemberStatus,oneof" json:"member_status,omitempty"`
	PresenceStatus *MeetingPresenceStatus `protobuf:"varint,5,opt,name=presence_status,json=presenceStatus,proto3,enum=tada.api.meeting.MeetingPresenceStatus,oneof" json:"presence_status,omitempty"`
	UuidSection    []string               `protobuf:"bytes,6,rep,name=uuid_section,json=uuidSection,proto3" json:"uuid_section,omitempty"`
}

func (x *GetMeetingMembersRequest) Reset() {
	*x = GetMeetingMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingMembersRequest) ProtoMessage() {}

func (x *GetMeetingMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingMembersRequest.ProtoReflect.Descriptor instead.
func (*GetMeetingMembersRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetMeetingMembersRequest) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *GetMeetingMembersRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetMeetingMembersRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetMeetingMembersRequest) GetMemberStatus() MeetingMemberStatus {
	if x != nil && x.MemberStatus != nil {
		return *x.MemberStatus
	}
	return MeetingMemberStatus_MEETING_MEMBER_STATUS_UNSPECIFIED
}

func (x *GetMeetingMembersRequest) GetPresenceStatus() MeetingPresenceStatus {
	if x != nil && x.PresenceStatus != nil {
		return *x.PresenceStatus
	}
	return MeetingPresenceStatus_MEETING_PRESENCE_STATUS_UNSPECIFIED
}

func (x *GetMeetingMembersRequest) GetUuidSection() []string {
	if x != nil {
		return x.UuidSection
	}
	return nil
}

type GetMeetingMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	Limit   *int32    `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset  *int32    `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	Total   *int32    `protobuf:"varint,4,opt,name=total,proto3,oneof" json:"total,omitempty"`
}

func (x *GetMeetingMembersResponse) Reset() {
	*x = GetMeetingMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingMembersResponse) ProtoMessage() {}

func (x *GetMeetingMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingMembersResponse.ProtoReflect.Descriptor instead.
func (*GetMeetingMembersResponse) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetMeetingMembersResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GetMeetingMembersResponse) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetMeetingMembersResponse) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetMeetingMembersResponse) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type AddMemberInMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId      uint64                `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	ContactUuid    string                `protobuf:"bytes,2,opt,name=contact_uuid,json=contactUuid,proto3" json:"contact_uuid,omitempty"`
	UserUuid       string                `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	ChatUuid       string                `protobuf:"bytes,4,opt,name=chat_uuid,json=chatUuid,proto3" json:"chat_uuid,omitempty"`
	MemberStatus   MeetingMemberStatus   `protobuf:"varint,5,opt,name=member_status,json=memberStatus,proto3,enum=tada.api.meeting.MeetingMemberStatus" json:"member_status,omitempty"`
	PresenceStatus MeetingPresenceStatus `protobuf:"varint,6,opt,name=presence_status,json=presenceStatus,proto3,enum=tada.api.meeting.MeetingPresenceStatus" json:"presence_status,omitempty"`
}

func (x *AddMemberInMeetingRequest) Reset() {
	*x = AddMemberInMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemberInMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemberInMeetingRequest) ProtoMessage() {}

func (x *AddMemberInMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemberInMeetingRequest.ProtoReflect.Descriptor instead.
func (*AddMemberInMeetingRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{9}
}

func (x *AddMemberInMeetingRequest) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *AddMemberInMeetingRequest) GetContactUuid() string {
	if x != nil {
		return x.ContactUuid
	}
	return ""
}

func (x *AddMemberInMeetingRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddMemberInMeetingRequest) GetChatUuid() string {
	if x != nil {
		return x.ChatUuid
	}
	return ""
}

func (x *AddMemberInMeetingRequest) GetMemberStatus() MeetingMemberStatus {
	if x != nil {
		return x.MemberStatus
	}
	return MeetingMemberStatus_MEETING_MEMBER_STATUS_UNSPECIFIED
}

func (x *AddMemberInMeetingRequest) GetPresenceStatus() MeetingPresenceStatus {
	if x != nil {
		return x.PresenceStatus
	}
	return MeetingPresenceStatus_MEETING_PRESENCE_STATUS_UNSPECIFIED
}

type UpdateMemberInMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId      uint64                 `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	UserUuid       string                 `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	ChatUuid       *string                `protobuf:"bytes,3,opt,name=chat_uuid,json=chatUuid,proto3,oneof" json:"chat_uuid,omitempty"`
	MemberStatus   *MeetingMemberStatus   `protobuf:"varint,4,opt,name=member_status,json=memberStatus,proto3,enum=tada.api.meeting.MeetingMemberStatus,oneof" json:"member_status,omitempty"`
	PresenceStatus *MeetingPresenceStatus `protobuf:"varint,5,opt,name=presence_status,json=presenceStatus,proto3,enum=tada.api.meeting.MeetingPresenceStatus,oneof" json:"presence_status,omitempty"`
}

func (x *UpdateMemberInMeetingRequest) Reset() {
	*x = UpdateMemberInMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberInMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberInMeetingRequest) ProtoMessage() {}

func (x *UpdateMemberInMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberInMeetingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberInMeetingRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateMemberInMeetingRequest) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *UpdateMemberInMeetingRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateMemberInMeetingRequest) GetChatUuid() string {
	if x != nil && x.ChatUuid != nil {
		return *x.ChatUuid
	}
	return ""
}

func (x *UpdateMemberInMeetingRequest) GetMemberStatus() MeetingMemberStatus {
	if x != nil && x.MemberStatus != nil {
		return *x.MemberStatus
	}
	return MeetingMemberStatus_MEETING_MEMBER_STATUS_UNSPECIFIED
}

func (x *UpdateMemberInMeetingRequest) GetPresenceStatus() MeetingPresenceStatus {
	if x != nil && x.PresenceStatus != nil {
		return *x.PresenceStatus
	}
	return MeetingPresenceStatus_MEETING_PRESENCE_STATUS_UNSPECIFIED
}

type DeleteMemberFromMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId uint64 `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	UserUuid  string `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *DeleteMemberFromMeetingRequest) Reset() {
	*x = DeleteMemberFromMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemberFromMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemberFromMeetingRequest) ProtoMessage() {}

func (x *DeleteMemberFromMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemberFromMeetingRequest.ProtoReflect.Descriptor instead.
func (*DeleteMemberFromMeetingRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteMemberFromMeetingRequest) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *DeleteMemberFromMeetingRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type SuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SuccessResponse) Reset() {
	*x = SuccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessResponse) ProtoMessage() {}

func (x *SuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessResponse.ProtoReflect.Descriptor instead.
func (*SuccessResponse) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{12}
}

func (x *SuccessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GenerateSellsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingId uint64                 `protobuf:"varint,1,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_at,json=startAt,proto3,oneof" json:"start_at,omitempty"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_at,json=endAt,proto3,oneof" json:"end_at,omitempty"`
}

func (x *GenerateSellsRequest) Reset() {
	*x = GenerateSellsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSellsRequest) ProtoMessage() {}

func (x *GenerateSellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tada_api_meeting_calendar_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSellsRequest.ProtoReflect.Descriptor instead.
func (*GenerateSellsRequest) Descriptor() ([]byte, []int) {
	return file_tada_api_meeting_calendar_service_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateSellsRequest) GetMeetingId() uint64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *GenerateSellsRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GenerateSellsRequest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

var File_tada_api_meeting_calendar_service_proto protoreflect.FileDescriptor

var file_tada_api_meeting_calendar_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x74, 0x61, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x03, 0x0a, 0x07, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x22, 0x9c, 0x01,
	0x0a, 0x04, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x59, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x22, 0xb6, 0x02, 0x0a,
	0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x69,
	0x73, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbb, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x48, 0x01, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x22, 0xdf, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x48, 0x06, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6a,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x03, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x75, 0x69, 0x64,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb5, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x4a, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8,
	0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x55,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x2a, 0xcb, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4d,
	0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x2a, 0xd5, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x4f, 0x55, 0x42, 0x54, 0x53, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x91,
	0x02, 0x0a, 0x18, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x4d,
	0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27,
	0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x4c, 0x59, 0x5f, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59,
	0x10, 0x05, 0x32, 0xc6, 0x0c, 0x0a, 0x0a, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x69, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x79, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x19, 0x2e, 0x74, 0x61,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x19,
	0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x85, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a,
	0x12, 0x82, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x21, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x74, 0x61,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74,
	0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x9c,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a, 0x2e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xab, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x92, 0x01, 0x0a, 0x10,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x13, 0x54, 0x61, 0x64, 0x61, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x74, 0x61, 0x64, 0x61, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x64, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x64,
	0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3b, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x50, 0x62, 0xaa, 0x02, 0x10, 0x54, 0x61, 0x64,
	0x61, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x10,
	0x54, 0x61, 0x64, 0x61, 0x5c, 0x41, 0x50, 0x49, 0x5c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tada_api_meeting_calendar_service_proto_rawDescOnce sync.Once
	file_tada_api_meeting_calendar_service_proto_rawDescData = file_tada_api_meeting_calendar_service_proto_rawDesc
)

func file_tada_api_meeting_calendar_service_proto_rawDescGZIP() []byte {
	file_tada_api_meeting_calendar_service_proto_rawDescOnce.Do(func() {
		file_tada_api_meeting_calendar_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tada_api_meeting_calendar_service_proto_rawDescData)
	})
	return file_tada_api_meeting_calendar_service_proto_rawDescData
}

var file_tada_api_meeting_calendar_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tada_api_meeting_calendar_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tada_api_meeting_calendar_service_proto_goTypes = []interface{}{
	(MeetingMemberStatus)(0),               // 0: tada.api.meeting.MeetingMemberStatus
	(MeetingPresenceStatus)(0),             // 1: tada.api.meeting.MeetingPresenceStatus
	(MeetingRepeatabilityType)(0),          // 2: tada.api.meeting.MeetingRepeatabilityType
	(*Meeting)(nil),                        // 3: tada.api.meeting.Meeting
	(*Freq)(nil),                           // 4: tada.api.meeting.Freq
	(*Member)(nil),                         // 5: tada.api.meeting.Member
	(*GetMeetingsRequest)(nil),             // 6: tada.api.meeting.GetMeetingsRequest
	(*GetMeetingsResponse)(nil),            // 7: tada.api.meeting.GetMeetingsResponse
	(*CreateMeetingRequest)(nil),           // 8: tada.api.meeting.CreateMeetingRequest
	(*UpdateMeetingRequest)(nil),           // 9: tada.api.meeting.UpdateMeetingRequest
	(*GetMeetingMembersRequest)(nil),       // 10: tada.api.meeting.GetMeetingMembersRequest
	(*GetMeetingMembersResponse)(nil),      // 11: tada.api.meeting.GetMeetingMembersResponse
	(*AddMemberInMeetingRequest)(nil),      // 12: tada.api.meeting.AddMemberInMeetingRequest
	(*UpdateMemberInMeetingRequest)(nil),   // 13: tada.api.meeting.UpdateMemberInMeetingRequest
	(*DeleteMemberFromMeetingRequest)(nil), // 14: tada.api.meeting.DeleteMemberFromMeetingRequest
	(*SuccessResponse)(nil),                // 15: tada.api.meeting.SuccessResponse
	(*GenerateSellsRequest)(nil),           // 16: tada.api.meeting.GenerateSellsRequest
	(*timestamppb.Timestamp)(nil),          // 17: google.protobuf.Timestamp
	(*wrapperspb.Int64Value)(nil),          // 18: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),         // 19: google.protobuf.StringValue
}
var file_tada_api_meeting_calendar_service_proto_depIdxs = []int32{
	17, // 0: tada.api.meeting.Meeting.start_at:type_name -> google.protobuf.Timestamp
	4,  // 1: tada.api.meeting.Meeting.freq:type_name -> tada.api.meeting.Freq
	5,  // 2: tada.api.meeting.Meeting.members:type_name -> tada.api.meeting.Member
	2,  // 3: tada.api.meeting.Freq.repeatability_type:type_name -> tada.api.meeting.MeetingRepeatabilityType
	0,  // 4: tada.api.meeting.Member.member_status:type_name -> tada.api.meeting.MeetingMemberStatus
	1,  // 5: tada.api.meeting.Member.presence_status:type_name -> tada.api.meeting.MeetingPresenceStatus
	17, // 6: tada.api.meeting.GetMeetingsRequest.date_from:type_name -> google.protobuf.Timestamp
	17, // 7: tada.api.meeting.GetMeetingsRequest.date_to:type_name -> google.protobuf.Timestamp
	3,  // 8: tada.api.meeting.GetMeetingsResponse.meetings:type_name -> tada.api.meeting.Meeting
	17, // 9: tada.api.meeting.CreateMeetingRequest.start_at:type_name -> google.protobuf.Timestamp
	4,  // 10: tada.api.meeting.CreateMeetingRequest.freq:type_name -> tada.api.meeting.Freq
	5,  // 11: tada.api.meeting.CreateMeetingRequest.members:type_name -> tada.api.meeting.Member
	4,  // 12: tada.api.meeting.UpdateMeetingRequest.freq:type_name -> tada.api.meeting.Freq
	17, // 13: tada.api.meeting.UpdateMeetingRequest.start_at:type_name -> google.protobuf.Timestamp
	0,  // 14: tada.api.meeting.GetMeetingMembersRequest.member_status:type_name -> tada.api.meeting.MeetingMemberStatus
	1,  // 15: tada.api.meeting.GetMeetingMembersRequest.presence_status:type_name -> tada.api.meeting.MeetingPresenceStatus
	5,  // 16: tada.api.meeting.GetMeetingMembersResponse.members:type_name -> tada.api.meeting.Member
	0,  // 17: tada.api.meeting.AddMemberInMeetingRequest.member_status:type_name -> tada.api.meeting.MeetingMemberStatus
	1,  // 18: tada.api.meeting.AddMemberInMeetingRequest.presence_status:type_name -> tada.api.meeting.MeetingPresenceStatus
	0,  // 19: tada.api.meeting.UpdateMemberInMeetingRequest.member_status:type_name -> tada.api.meeting.MeetingMemberStatus
	1,  // 20: tada.api.meeting.UpdateMemberInMeetingRequest.presence_status:type_name -> tada.api.meeting.MeetingPresenceStatus
	17, // 21: tada.api.meeting.GenerateSellsRequest.start_at:type_name -> google.protobuf.Timestamp
	17, // 22: tada.api.meeting.GenerateSellsRequest.end_at:type_name -> google.protobuf.Timestamp
	6,  // 23: tada.api.meeting.MeetingApi.GetMeetings:input_type -> tada.api.meeting.GetMeetingsRequest
	18, // 24: tada.api.meeting.MeetingApi.GetMeetingById:input_type -> google.protobuf.Int64Value
	19, // 25: tada.api.meeting.MeetingApi.GetMeetingByChatUUID:input_type -> google.protobuf.StringValue
	8,  // 26: tada.api.meeting.MeetingApi.CreateMeeting:input_type -> tada.api.meeting.CreateMeetingRequest
	9,  // 27: tada.api.meeting.MeetingApi.UpdateMeeting:input_type -> tada.api.meeting.UpdateMeetingRequest
	18, // 28: tada.api.meeting.MeetingApi.DeleteMeeting:input_type -> google.protobuf.Int64Value
	10, // 29: tada.api.meeting.MeetingApi.GetMeetingMembers:input_type -> tada.api.meeting.GetMeetingMembersRequest
	12, // 30: tada.api.meeting.MeetingApi.AddMemberInMeeting:input_type -> tada.api.meeting.AddMemberInMeetingRequest
	13, // 31: tada.api.meeting.MeetingApi.UpdateMemberInMeeting:input_type -> tada.api.meeting.UpdateMemberInMeetingRequest
	14, // 32: tada.api.meeting.MeetingApi.DeleteMemberFromMeeting:input_type -> tada.api.meeting.DeleteMemberFromMeetingRequest
	16, // 33: tada.api.meeting.MeetingApi.GenerateSells:input_type -> tada.api.meeting.GenerateSellsRequest
	7,  // 34: tada.api.meeting.MeetingApi.GetMeetings:output_type -> tada.api.meeting.GetMeetingsResponse
	3,  // 35: tada.api.meeting.MeetingApi.GetMeetingById:output_type -> tada.api.meeting.Meeting
	3,  // 36: tada.api.meeting.MeetingApi.GetMeetingByChatUUID:output_type -> tada.api.meeting.Meeting
	3,  // 37: tada.api.meeting.MeetingApi.CreateMeeting:output_type -> tada.api.meeting.Meeting
	3,  // 38: tada.api.meeting.MeetingApi.UpdateMeeting:output_type -> tada.api.meeting.Meeting
	15, // 39: tada.api.meeting.MeetingApi.DeleteMeeting:output_type -> tada.api.meeting.SuccessResponse
	11, // 40: tada.api.meeting.MeetingApi.GetMeetingMembers:output_type -> tada.api.meeting.GetMeetingMembersResponse
	5,  // 41: tada.api.meeting.MeetingApi.AddMemberInMeeting:output_type -> tada.api.meeting.Member
	5,  // 42: tada.api.meeting.MeetingApi.UpdateMemberInMeeting:output_type -> tada.api.meeting.Member
	15, // 43: tada.api.meeting.MeetingApi.DeleteMemberFromMeeting:output_type -> tada.api.meeting.SuccessResponse
	15, // 44: tada.api.meeting.MeetingApi.GenerateSells:output_type -> tada.api.meeting.SuccessResponse
	34, // [34:45] is the sub-list for method output_type
	23, // [23:34] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_tada_api_meeting_calendar_service_proto_init() }
func file_tada_api_meeting_calendar_service_proto_init() {
	if File_tada_api_meeting_calendar_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tada_api_meeting_calendar_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meeting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Freq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemberInMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberInMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemberFromMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tada_api_meeting_calendar_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSellsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tada_api_meeting_calendar_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_tada_api_meeting_calendar_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tada_api_meeting_calendar_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tada_api_meeting_calendar_service_proto_goTypes,
		DependencyIndexes: file_tada_api_meeting_calendar_service_proto_depIdxs,
		EnumInfos:         file_tada_api_meeting_calendar_service_proto_enumTypes,
		MessageInfos:      file_tada_api_meeting_calendar_service_proto_msgTypes,
	}.Build()
	File_tada_api_meeting_calendar_service_proto = out.File
	file_tada_api_meeting_calendar_service_proto_rawDesc = nil
	file_tada_api_meeting_calendar_service_proto_goTypes = nil
	file_tada_api_meeting_calendar_service_proto_depIdxs = nil
}
