// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: tada/api/meeting/calendar_service.proto

package meeting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeetingServiceClient is the client API for MeetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetingServiceClient interface {
	GetMeetings(ctx context.Context, in *GetMeetingsRequest, opts ...grpc.CallOption) (*GetMeetingsResponse, error)
	GetMeetingById(ctx context.Context, in *GetMeetingByIdRequest, opts ...grpc.CallOption) (*Meeting, error)
	CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*Meeting, error)
	UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*Meeting, error)
	DeleteMeeting(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetMeetingMembers(ctx context.Context, in *GetMeetingMembersRequest, opts ...grpc.CallOption) (*GetMeetingMembersResponse, error)
	AddMemberInMeeting(ctx context.Context, in *AddMemberInMeetingRequest, opts ...grpc.CallOption) (*AddMemberInMeetingResponse, error)
	DeleteMemberFromMeeting(ctx context.Context, in *DeleteMemberFromMeetingRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type meetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingServiceClient(cc grpc.ClientConnInterface) MeetingServiceClient {
	return &meetingServiceClient{cc}
}

func (c *meetingServiceClient) GetMeetings(ctx context.Context, in *GetMeetingsRequest, opts ...grpc.CallOption) (*GetMeetingsResponse, error) {
	out := new(GetMeetingsResponse)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/GetMeetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeetingById(ctx context.Context, in *GetMeetingByIdRequest, opts ...grpc.CallOption) (*Meeting, error) {
	out := new(Meeting)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/GetMeetingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*Meeting, error) {
	out := new(Meeting)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/CreateMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*Meeting, error) {
	out := new(Meeting)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/UpdateMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) DeleteMeeting(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/DeleteMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeetingMembers(ctx context.Context, in *GetMeetingMembersRequest, opts ...grpc.CallOption) (*GetMeetingMembersResponse, error) {
	out := new(GetMeetingMembersResponse)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/GetMeetingMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) AddMemberInMeeting(ctx context.Context, in *AddMemberInMeetingRequest, opts ...grpc.CallOption) (*AddMemberInMeetingResponse, error) {
	out := new(AddMemberInMeetingResponse)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/AddMemberInMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) DeleteMemberFromMeeting(ctx context.Context, in *DeleteMemberFromMeetingRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/tada.api.meeting.MeetingService/DeleteMemberFromMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingServiceServer is the server API for MeetingService service.
// All implementations must embed UnimplementedMeetingServiceServer
// for forward compatibility
type MeetingServiceServer interface {
	GetMeetings(context.Context, *GetMeetingsRequest) (*GetMeetingsResponse, error)
	GetMeetingById(context.Context, *GetMeetingByIdRequest) (*Meeting, error)
	CreateMeeting(context.Context, *CreateMeetingRequest) (*Meeting, error)
	UpdateMeeting(context.Context, *UpdateMeetingRequest) (*Meeting, error)
	DeleteMeeting(context.Context, *DeleteMeetingRequest) (*SuccessResponse, error)
	GetMeetingMembers(context.Context, *GetMeetingMembersRequest) (*GetMeetingMembersResponse, error)
	AddMemberInMeeting(context.Context, *AddMemberInMeetingRequest) (*AddMemberInMeetingResponse, error)
	DeleteMemberFromMeeting(context.Context, *DeleteMemberFromMeetingRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedMeetingServiceServer()
}

// UnimplementedMeetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeetingServiceServer struct {
}

func (UnimplementedMeetingServiceServer) GetMeetings(context.Context, *GetMeetingsRequest) (*GetMeetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetings not implemented")
}
func (UnimplementedMeetingServiceServer) GetMeetingById(context.Context, *GetMeetingByIdRequest) (*Meeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingById not implemented")
}
func (UnimplementedMeetingServiceServer) CreateMeeting(context.Context, *CreateMeetingRequest) (*Meeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeeting not implemented")
}
func (UnimplementedMeetingServiceServer) UpdateMeeting(context.Context, *UpdateMeetingRequest) (*Meeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeeting not implemented")
}
func (UnimplementedMeetingServiceServer) DeleteMeeting(context.Context, *DeleteMeetingRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeeting not implemented")
}
func (UnimplementedMeetingServiceServer) GetMeetingMembers(context.Context, *GetMeetingMembersRequest) (*GetMeetingMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingMembers not implemented")
}
func (UnimplementedMeetingServiceServer) AddMemberInMeeting(context.Context, *AddMemberInMeetingRequest) (*AddMemberInMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberInMeeting not implemented")
}
func (UnimplementedMeetingServiceServer) DeleteMemberFromMeeting(context.Context, *DeleteMemberFromMeetingRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberFromMeeting not implemented")
}
func (UnimplementedMeetingServiceServer) mustEmbedUnimplementedMeetingServiceServer() {}

// UnsafeMeetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetingServiceServer will
// result in compilation errors.
type UnsafeMeetingServiceServer interface {
	mustEmbedUnimplementedMeetingServiceServer()
}

func RegisterMeetingServiceServer(s grpc.ServiceRegistrar, srv MeetingServiceServer) {
	s.RegisterService(&MeetingService_ServiceDesc, srv)
}

func _MeetingService_GetMeetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/GetMeetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeetings(ctx, req.(*GetMeetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeetingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeetingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/GetMeetingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeetingById(ctx, req.(*GetMeetingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_CreateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).CreateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/CreateMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).CreateMeeting(ctx, req.(*CreateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_UpdateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).UpdateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/UpdateMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).UpdateMeeting(ctx, req.(*UpdateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_DeleteMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).DeleteMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/DeleteMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).DeleteMeeting(ctx, req.(*DeleteMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeetingMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeetingMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/GetMeetingMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeetingMembers(ctx, req.(*GetMeetingMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_AddMemberInMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberInMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).AddMemberInMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/AddMemberInMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).AddMemberInMeeting(ctx, req.(*AddMemberInMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_DeleteMemberFromMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberFromMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).DeleteMemberFromMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.api.meeting.MeetingService/DeleteMemberFromMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).DeleteMemberFromMeeting(ctx, req.(*DeleteMemberFromMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetingService_ServiceDesc is the grpc.ServiceDesc for MeetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.api.meeting.MeetingService",
	HandlerType: (*MeetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeetings",
			Handler:    _MeetingService_GetMeetings_Handler,
		},
		{
			MethodName: "GetMeetingById",
			Handler:    _MeetingService_GetMeetingById_Handler,
		},
		{
			MethodName: "CreateMeeting",
			Handler:    _MeetingService_CreateMeeting_Handler,
		},
		{
			MethodName: "UpdateMeeting",
			Handler:    _MeetingService_UpdateMeeting_Handler,
		},
		{
			MethodName: "DeleteMeeting",
			Handler:    _MeetingService_DeleteMeeting_Handler,
		},
		{
			MethodName: "GetMeetingMembers",
			Handler:    _MeetingService_GetMeetingMembers_Handler,
		},
		{
			MethodName: "AddMemberInMeeting",
			Handler:    _MeetingService_AddMemberInMeeting_Handler,
		},
		{
			MethodName: "DeleteMemberFromMeeting",
			Handler:    _MeetingService_DeleteMemberFromMeeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/api/meeting/calendar_service.proto",
}
