// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/billing/api/tariff/v1/tariff_service.proto

package tariff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TariffServiceClient is the client API for TariffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TariffServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Element, error)
	Assign(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*AssignResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	SetAsDefault(ctx context.Context, in *SetAsDefaultRequest, opts ...grpc.CallOption) (*SetAsDefaultResponse, error)
}

type tariffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTariffServiceClient(cc grpc.ClientConnInterface) TariffServiceClient {
	return &tariffServiceClient{cc}
}

func (c *tariffServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Element, error) {
	out := new(Element)
	err := c.cc.Invoke(ctx, "/tada.billing.api.tariff.v1.TariffService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) Assign(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*AssignResponse, error) {
	out := new(AssignResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.tariff.v1.TariffService/Assign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.tariff.v1.TariffService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.tariff.v1.TariffService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.tariff.v1.TariffService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.tariff.v1.TariffService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) SetAsDefault(ctx context.Context, in *SetAsDefaultRequest, opts ...grpc.CallOption) (*SetAsDefaultResponse, error) {
	out := new(SetAsDefaultResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.tariff.v1.TariffService/SetAsDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TariffServiceServer is the server API for TariffService service.
// All implementations must embed UnimplementedTariffServiceServer
// for forward compatibility
type TariffServiceServer interface {
	Create(context.Context, *CreateRequest) (*Element, error)
	Assign(context.Context, *AssignRequest) (*AssignResponse, error)
	Get(context.Context, *GetRequest) (*GetListResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	SetAsDefault(context.Context, *SetAsDefaultRequest) (*SetAsDefaultResponse, error)
	mustEmbedUnimplementedTariffServiceServer()
}

// UnimplementedTariffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTariffServiceServer struct {
}

func (UnimplementedTariffServiceServer) Create(context.Context, *CreateRequest) (*Element, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTariffServiceServer) Assign(context.Context, *AssignRequest) (*AssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assign not implemented")
}
func (UnimplementedTariffServiceServer) Get(context.Context, *GetRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTariffServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedTariffServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTariffServiceServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedTariffServiceServer) SetAsDefault(context.Context, *SetAsDefaultRequest) (*SetAsDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAsDefault not implemented")
}
func (UnimplementedTariffServiceServer) mustEmbedUnimplementedTariffServiceServer() {}

// UnsafeTariffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TariffServiceServer will
// result in compilation errors.
type UnsafeTariffServiceServer interface {
	mustEmbedUnimplementedTariffServiceServer()
}

func RegisterTariffServiceServer(s grpc.ServiceRegistrar, srv TariffServiceServer) {
	s.RegisterService(&TariffService_ServiceDesc, srv)
}

func _TariffService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.tariff.v1.TariffService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.tariff.v1.TariffService/Assign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Assign(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.tariff.v1.TariffService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.tariff.v1.TariffService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.tariff.v1.TariffService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.tariff.v1.TariffService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_SetAsDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAsDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).SetAsDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.tariff.v1.TariffService/SetAsDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).SetAsDefault(ctx, req.(*SetAsDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TariffService_ServiceDesc is the grpc.ServiceDesc for TariffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TariffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.billing.api.tariff.v1.TariffService",
	HandlerType: (*TariffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TariffService_Create_Handler,
		},
		{
			MethodName: "Assign",
			Handler:    _TariffService_Assign_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TariffService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _TariffService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TariffService_Update_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _TariffService_Close_Handler,
		},
		{
			MethodName: "SetAsDefault",
			Handler:    _TariffService_SetAsDefault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/billing/api/tariff/v1/tariff_service.proto",
}
