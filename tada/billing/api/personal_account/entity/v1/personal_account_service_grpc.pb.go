// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tada/billing/api/personal_account/entity/v1/personal_account_service.proto

package personal_account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonalAccountServiceClient is the client API for PersonalAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalAccountServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetCountsList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetCountsListResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	Activate(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
	Block(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
	Unblock(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
	Suspend(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ChangeNextBillingDate(ctx context.Context, in *ChangeNextBillingDateRequest, opts ...grpc.CallOption) (*ChangeNextBillingDateResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetDiskSpaceQuota(ctx context.Context, in *GetDiskSpaceQuotaRequest, opts ...grpc.CallOption) (*GetDiskSpaceQuotaResponse, error)
	GetCostOfWorkplaces(ctx context.Context, in *GetCostOfWorkplacesRequest, opts ...grpc.CallOption) (*GetCostOfWorkplacesResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type personalAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalAccountServiceClient(cc grpc.ClientConnInterface) PersonalAccountServiceClient {
	return &personalAccountServiceClient{cc}
}

func (c *personalAccountServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) GetCountsList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetCountsListResponse, error) {
	out := new(GetCountsListResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetCountsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) Activate(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) Block(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) Unblock(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Unblock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) Suspend(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Suspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) ChangeNextBillingDate(ctx context.Context, in *ChangeNextBillingDateRequest, opts ...grpc.CallOption) (*ChangeNextBillingDateResponse, error) {
	out := new(ChangeNextBillingDateResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/ChangeNextBillingDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) GetDiskSpaceQuota(ctx context.Context, in *GetDiskSpaceQuotaRequest, opts ...grpc.CallOption) (*GetDiskSpaceQuotaResponse, error) {
	out := new(GetDiskSpaceQuotaResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetDiskSpaceQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) GetCostOfWorkplaces(ctx context.Context, in *GetCostOfWorkplacesRequest, opts ...grpc.CallOption) (*GetCostOfWorkplacesResponse, error) {
	out := new(GetCostOfWorkplacesResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetCostOfWorkplaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccountServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalAccountServiceServer is the server API for PersonalAccountService service.
// All implementations must embed UnimplementedPersonalAccountServiceServer
// for forward compatibility
type PersonalAccountServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetListResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetCountsList(context.Context, *GetListRequest) (*GetCountsListResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	Activate(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
	Block(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
	Unblock(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
	Suspend(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	ChangeNextBillingDate(context.Context, *ChangeNextBillingDateRequest) (*ChangeNextBillingDateResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetDiskSpaceQuota(context.Context, *GetDiskSpaceQuotaRequest) (*GetDiskSpaceQuotaResponse, error)
	GetCostOfWorkplaces(context.Context, *GetCostOfWorkplacesRequest) (*GetCostOfWorkplacesResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedPersonalAccountServiceServer()
}

// UnimplementedPersonalAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonalAccountServiceServer struct {
}

func (UnimplementedPersonalAccountServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPersonalAccountServiceServer) Get(context.Context, *GetRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPersonalAccountServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPersonalAccountServiceServer) GetCountsList(context.Context, *GetListRequest) (*GetCountsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountsList not implemented")
}
func (UnimplementedPersonalAccountServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedPersonalAccountServiceServer) Activate(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedPersonalAccountServiceServer) Block(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedPersonalAccountServiceServer) Unblock(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unblock not implemented")
}
func (UnimplementedPersonalAccountServiceServer) Suspend(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suspend not implemented")
}
func (UnimplementedPersonalAccountServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPersonalAccountServiceServer) ChangeNextBillingDate(context.Context, *ChangeNextBillingDateRequest) (*ChangeNextBillingDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNextBillingDate not implemented")
}
func (UnimplementedPersonalAccountServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedPersonalAccountServiceServer) GetDiskSpaceQuota(context.Context, *GetDiskSpaceQuotaRequest) (*GetDiskSpaceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskSpaceQuota not implemented")
}
func (UnimplementedPersonalAccountServiceServer) GetCostOfWorkplaces(context.Context, *GetCostOfWorkplacesRequest) (*GetCostOfWorkplacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostOfWorkplaces not implemented")
}
func (UnimplementedPersonalAccountServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPersonalAccountServiceServer) mustEmbedUnimplementedPersonalAccountServiceServer() {
}

// UnsafePersonalAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalAccountServiceServer will
// result in compilation errors.
type UnsafePersonalAccountServiceServer interface {
	mustEmbedUnimplementedPersonalAccountServiceServer()
}

func RegisterPersonalAccountServiceServer(s grpc.ServiceRegistrar, srv PersonalAccountServiceServer) {
	s.RegisterService(&PersonalAccountService_ServiceDesc, srv)
}

func _PersonalAccountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_GetCountsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).GetCountsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetCountsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).GetCountsList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Activate(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Block(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_Unblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Unblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Unblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Unblock(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_Suspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Suspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Suspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Suspend(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_ChangeNextBillingDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNextBillingDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).ChangeNextBillingDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/ChangeNextBillingDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).ChangeNextBillingDate(ctx, req.(*ChangeNextBillingDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_GetDiskSpaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskSpaceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).GetDiskSpaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetDiskSpaceQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).GetDiskSpaceQuota(ctx, req.(*GetDiskSpaceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_GetCostOfWorkplaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostOfWorkplacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).GetCostOfWorkplaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/GetCostOfWorkplaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).GetCostOfWorkplaces(ctx, req.(*GetCostOfWorkplacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccountService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccountServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tada.billing.api.personal_account.entity.v1.PersonalAccountService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccountServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalAccountService_ServiceDesc is the grpc.ServiceDesc for PersonalAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tada.billing.api.personal_account.entity.v1.PersonalAccountService",
	HandlerType: (*PersonalAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PersonalAccountService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PersonalAccountService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PersonalAccountService_GetList_Handler,
		},
		{
			MethodName: "GetCountsList",
			Handler:    _PersonalAccountService_GetCountsList_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _PersonalAccountService_GetStatus_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _PersonalAccountService_Activate_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _PersonalAccountService_Block_Handler,
		},
		{
			MethodName: "Unblock",
			Handler:    _PersonalAccountService_Unblock_Handler,
		},
		{
			MethodName: "Suspend",
			Handler:    _PersonalAccountService_Suspend_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PersonalAccountService_Update_Handler,
		},
		{
			MethodName: "ChangeNextBillingDate",
			Handler:    _PersonalAccountService_ChangeNextBillingDate_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _PersonalAccountService_GetUsers_Handler,
		},
		{
			MethodName: "GetDiskSpaceQuota",
			Handler:    _PersonalAccountService_GetDiskSpaceQuota_Handler,
		},
		{
			MethodName: "GetCostOfWorkplaces",
			Handler:    _PersonalAccountService_GetCostOfWorkplaces_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PersonalAccountService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tada/billing/api/personal_account/entity/v1/personal_account_service.proto",
}
